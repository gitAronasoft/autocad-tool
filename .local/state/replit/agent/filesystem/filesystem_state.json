{"file_contents":{"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":98},"pyproject.toml":{"content":"[project]\nname = \"python-template\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Your Name <you@example.com>\"]\nrequires-python = \">=3.11\"\ndependencies = [\n    \"ezdxf>=1.4.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask>=3.1.2\",\n    \"matplotlib>=3.10.6\",\n    \"numpy>=2.3.3\",\n    \"openai>=1.109.1\",\n    \"opencv-python>=4.11.0.86\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"email-validator>=2.3.0\",\n    \"gunicorn>=23.0.0\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":460},"app.py":{"content":"import os\nimport json\nfrom flask import Flask, render_template, request, jsonify, send_file\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom src.architectural_analyzer import ArchitecturalAnalyzer\nfrom src.autocad_integration import AutoCADIntegration\nimport traceback\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # needed for url_for to generate with https\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size\n\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\nos.makedirs('outputs', exist_ok=True)\n\nALLOWED_EXTENSIONS = {'dxf'}  # DWG requires conversion to DXF\n\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/')\ndef index():\n    \"\"\"Main upload page\"\"\"\n    return render_template('index.html')\n\n@app.route('/process', methods=['POST'])\ndef process_file():\n    \"\"\"Process uploaded DXF file with AI analysis\"\"\"\n    try:\n        # Check if file was uploaded\n        if 'dxf_file' not in request.files:\n            return jsonify({'success': False, 'error': 'No file uploaded'})\n        \n        file = request.files['dxf_file']\n        if file.filename == '':\n            return jsonify({'success': False, 'error': 'No file selected'})\n        \n        if not allowed_file(file.filename):\n            return jsonify({'success': False, 'error': 'Invalid file type. Please upload DXF files only. DWG files require conversion to DXF format.'})\n        \n        # Save uploaded file\n        if file.filename:\n            filename = secure_filename(file.filename)\n            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        else:\n            return jsonify({'success': False, 'error': 'Invalid filename'})\n        file.save(filepath)\n        \n        # Initialize AI analyzer and AutoCAD integration\n        analyzer = ArchitecturalAnalyzer()\n        autocad = AutoCADIntegration()\n        \n        # For DXF files, we need to convert to image for AI analysis\n        # For now, we'll load the DXF and process it directly\n        result = process_dxf_file(filepath, analyzer, autocad)\n        \n        return jsonify(result)\n        \n    except Exception as e:\n        print(f\"Error processing file: {str(e)}\")\n        traceback.print_exc()\n        return jsonify({'success': False, 'error': f'Processing error: {str(e)}'})\n\ndef process_dxf_file(filepath, analyzer, autocad):\n    \"\"\"Process a DXF file and return analysis results\"\"\"\n    try:\n        # Load the DXF file for analysis\n        success = autocad.load_dxf_file(filepath)\n        if not success:\n            return {'success': False, 'error': 'Could not load DXF file'}\n        \n        # Perform real DXF geometric analysis to extract wall patterns and coordinates\n        print(\"Starting real DXF geometric analysis...\")\n        \n        # Use the new geometric analysis method with AI enhancement instead of hardcoded coordinates\n        analysis_result = autocad.analyze_dxf_geometry(analyzer)\n        \n        # Log analysis metadata for debugging\n        metadata = analysis_result.get('analysis_metadata', {})\n        if metadata:\n            print(f\"Analysis metadata:\")\n            print(f\"  Entities extracted: {metadata.get('entities_extracted', {})}\")\n            print(f\"  Wall groups found: {metadata.get('wall_groups_found', 0)}\")\n            if metadata.get('building_bounds'):\n                bounds = metadata['building_bounds']\n                print(f\"  Building bounds: {bounds['width']:.1f} x {bounds['height']:.1f} units\")\n            if metadata.get('fallback_used'):\n                print(\"  Warning: Using fallback analysis - no geometry detected\")\n        \n        # Create a NEW clean DXF document for the output (only highlighted boundaries)\n        print(\"Creating clean output with only highlighted wall boundaries...\")\n        autocad_clean = AutoCADIntegration()\n        autocad_clean.create_new_dxf()\n        \n        layers_created = []\n        \n        # Execute the drawing commands on the clean document\n        commands_executed = autocad_clean.execute_autocad_commands(analysis_result)\n        elements_detected = commands_executed\n        \n        # Collect layer names from the drawing commands\n        for cmd in analysis_result.get('drawing_commands', []):\n            if cmd.get('action') == 'create_layer':\n                layer_name = cmd.get('layer_name')\n                if layer_name and layer_name not in layers_created:\n                    layers_created.append(layer_name)\n        \n        # Save the clean processed file (only boundaries and elements)\n        output_filename = f\"processed_{os.path.basename(filepath)}\"\n        output_path = os.path.join('outputs', output_filename)\n        autocad_clean.save_dxf(output_path)\n        \n        print(f\"Saved clean output with {commands_executed} highlighted boundaries\")\n        \n        # Export measurements if available\n        export_urls = {}\n        if 'measurements' in analysis_result and analysis_result['measurements']:\n            export_results = autocad.export_measurements(analysis_result['measurements'])\n            for format_type, file_path in export_results.items():\n                export_filename = os.path.basename(file_path)\n                export_urls[format_type] = f'/download/{export_filename}'\n        \n        return {\n            'success': True,\n            'analysis': {\n                'drawing_type': analysis_result['drawing_type'],\n                'layers_created': layers_created,\n                'elements_detected': elements_detected,\n                'measurements_summary': {\n                    'total_walls': len(analysis_result.get('measurements', {}).get('walls', [])),\n                    'total_doors': len(analysis_result.get('measurements', {}).get('doors', [])),\n                    'total_windows': len(analysis_result.get('measurements', {}).get('windows', [])),\n                    'perimeter_length': analysis_result.get('measurements', {}).get('perimeter_length', 0),\n                    'total_area': analysis_result.get('measurements', {}).get('total_area', 0)\n                }\n            },\n            'download_url': f'/download/{output_filename}',\n            'export_urls': export_urls\n        }\n        \n    except Exception as e:\n        return {'success': False, 'error': f'DXF processing error: {str(e)}'}\n\n@app.route('/download/<filename>')\ndef download_file(filename):\n    \"\"\"Download processed DXF file\"\"\"\n    try:\n        return send_file(os.path.join('outputs', filename), as_attachment=True)\n    except Exception as e:\n        return jsonify({'error': f'Download error: {str(e)}'}), 404\n\nif __name__ == '__main__':\n    print(\"üöÄ Starting AI-Powered AutoCAD Analyzer Web Server...\")\n    print(\"üìÅ Upload folder:\", app.config['UPLOAD_FOLDER'])\n    print(\"üåê Access the interface at: http://localhost:5000\")\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":7136},"demo.py":{"content":"import os\nfrom src.architectural_analyzer import ArchitecturalAnalyzer\nfrom src.autocad_integration import AutoCADIntegration\n\ndef main():\n    \"\"\"\n    Demo interface for the AI-powered AutoCAD plugin\n    \"\"\"\n    print(\"=\" * 60)\n    print(\"AI-POWERED AUTOCAD ARCHITECTURAL ANALYZER\")\n    print(\"=\" * 60)\n    print()\n    \n    print(\"üèóÔ∏è  Welcome to your AI-powered AutoCAD plugin!\")\n    print(\"This tool can analyze architectural drawings and automatically:\")\n    print(\"‚Ä¢ Detect floor plans vs elevation drawings\")\n    print(\"‚Ä¢ Trace interior and exterior walls\")\n    print(\"‚Ä¢ Identify garage and buffered spaces\")\n    print(\"‚Ä¢ Detect doors and windows\")\n    print(\"‚Ä¢ Generate proper AutoCAD layer names\")\n    print(\"‚Ä¢ Create AutoCAD-compatible drawing commands\")\n    print()\n    \n    # Initialize components\n    print(\"üîß Initializing AI analyzer...\")\n    analyzer = ArchitecturalAnalyzer()\n    \n    print(\"üîß Initializing AutoCAD integration...\")\n    autocad = AutoCADIntegration()\n    \n    print(\"‚úÖ System ready!\")\n    print()\n    \n    # Demo the AutoCAD integration\n    print(\"üìã Creating sample AutoCAD output...\")\n    \n    # Create a new DXF document\n    autocad.create_new_dxf()\n    \n    # Create layers based on your requirements from the transcript\n    print(\"Creating layers for different wall types:\")\n    \n    # Basement layers\n    autocad.create_layer(\"basement_interior_wall\", color=1)  # Red\n    autocad.create_layer(\"basement_exterior_wall\", color=2)  # Yellow\n    \n    # Main floor layers  \n    autocad.create_layer(\"main_floor_interior_wall\", color=1)  # Red\n    autocad.create_layer(\"main_floor_exterior_wall\", color=2)  # Yellow\n    autocad.create_layer(\"main_floor_garage_wall\", color=3)    # Green (buffered space)\n    \n    # Door and window layers\n    autocad.create_layer(\"front_door_main\", color=4)      # Cyan\n    autocad.create_layer(\"front_window_main\", color=5)    # Blue\n    autocad.create_layer(\"patio_door_main\", color=6)      # Magenta\n    \n    print(\"‚úÖ Layers created successfully!\")\n    \n    # Draw sample architectural elements\n    print(\"Drawing sample walls and elements...\")\n    \n    # Sample basement exterior wall (house perimeter)\n    basement_exterior = [(0, 0), (200, 0), (200, 150), (0, 150), (0, 0)]\n    autocad.draw_polyline(basement_exterior, \"basement_exterior_wall\")\n    \n    # Sample basement interior wall (inside the house)\n    basement_interior = [(20, 20), (180, 20), (180, 130), (20, 130), (20, 20)]\n    autocad.draw_polyline(basement_interior, \"basement_interior_wall\")\n    \n    # Sample garage area (main floor with buffered wall)\n    garage_wall = [(50, 0), (120, 0), (120, 60), (50, 60)]\n    autocad.draw_polyline(garage_wall, \"main_floor_garage_wall\")\n    \n    # Sample doors\n    autocad.draw_rectangle((90, 0), (110, 8), \"front_door_main\")      # Front door\n    autocad.draw_rectangle((150, 80), (170, 88), \"patio_door_main\")   # Patio door\n    \n    # Sample windows\n    autocad.draw_rectangle((30, 0), (45, 5), \"front_window_main\")     # Front window\n    \n    print(\"‚úÖ Sample elements drawn!\")\n    \n    # Save the output file\n    output_file = \"AI_analyzed_drawing.dxf\"\n    autocad.save_dxf(output_file)\n    \n    print(f\"üìÅ AutoCAD file saved as: {output_file}\")\n    \n    # List all created layers\n    print(\"\\nüìä Created layers:\")\n    layers = autocad.list_layers()\n    for layer in layers:\n        print(f\"   ‚Ä¢ {layer['name']} (Color: {layer['color']})\")\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"READY FOR AI ANALYSIS!\")\n    print(\"=\" * 60)\n    print()\n    print(\"Your AI-powered AutoCAD plugin is ready to:\")\n    print(\"1. Analyze uploaded architectural drawings (PDF or DXF)\")\n    print(\"2. Automatically detect walls, doors, windows\")\n    print(\"3. Generate proper layer names and colors\")\n    print(\"4. Create AutoCAD-compatible output\")\n    print()\n    print(\"To use with your drawings:\")\n    print(\"‚Ä¢ Upload architectural drawings to the project\")\n    print(\"‚Ä¢ The AI will analyze and detect building elements\")\n    print(\"‚Ä¢ Proper AutoCAD layers and geometry will be created\")\n    print(\"‚Ä¢ Review and import into your AutoCAD workflow\")\n    print()\n    print(\"üöÄ Plugin demonstration completed successfully!\")\n\nif __name__ == \"__main__\":\n    main()","size_bytes":4265},"replit.md":{"content":"# AI-Powered AutoCAD Analyzer\n\n## Overview\n\nThis is an AI-powered architectural drawing analysis tool that integrates with AutoCAD to automatically process DXF/DWG files. The system uses computer vision and OpenAI's GPT models to analyze architectural drawings, detect building elements (walls, doors, windows), classify floor types (basement, main floor, second floor), and automatically generate properly named AutoCAD layers. The application provides both a web interface for file uploads and a command-line demo interface for testing functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Web Interface**: Flask-based web application with Bootstrap CSS framework\n- **File Upload System**: Drag-and-drop interface supporting DXF and DWG files up to 50MB\n- **Real-time Feedback**: AJAX-based file processing with progress indicators\n- **Responsive Design**: Mobile-friendly interface using Bootstrap grid system\n\n### Backend Architecture\n- **Framework**: Flask web framework for HTTP request handling\n- **Modular Design**: Separation of concerns with dedicated modules for AI analysis and AutoCAD integration\n- **File Processing Pipeline**: Secure file upload handling with filename sanitization and type validation\n- **Error Handling**: Comprehensive exception handling with user-friendly error messages\n\n### Core Components\n- **ArchitecturalAnalyzer**: Main AI analysis engine that processes architectural drawings using OpenAI's vision models\n- **AutoCADIntegration**: Handles DXF file creation, layer management, and AutoCAD-compatible output generation\n- **Layer Management System**: Predefined naming conventions for different building elements and floor types\n\n### AI Integration\n- **Vision Analysis**: Uses OpenAI's latest GPT model for image analysis and element detection\n- **Element Detection**: Automatically identifies walls (interior/exterior), doors, windows, and garage spaces\n- **Floor Classification**: Distinguishes between basement, main floor, and second floor plans\n- **Smart Layer Naming**: Generates contextually appropriate AutoCAD layer names based on building elements\n\n### Data Processing\n- **File Format Support**: Handles both DXF and DWG file formats using ezdxf library\n- **Image Processing**: OpenCV and PIL for image manipulation and analysis\n- **Vector Graphics**: Direct manipulation of CAD vector data for precise element detection\n\n## External Dependencies\n\n### AI Services\n- **OpenAI API**: GPT models for architectural drawing analysis and element detection\n- **Computer Vision**: OpenCV for image processing and feature detection\n\n### CAD Integration\n- **ezdxf**: Python library for reading, writing, and manipulating DXF files\n- **AutoCAD Compatibility**: Generates R2010 format DXF files for broad compatibility\n\n### Web Framework\n- **Flask**: Python web framework for request handling and routing\n- **Bootstrap**: Frontend CSS framework for responsive design\n- **Font Awesome**: Icon library for user interface elements\n\n### File Processing\n- **Werkzeug**: Secure filename handling and file upload utilities\n- **PIL (Pillow)**: Image processing and format conversion\n- **NumPy**: Numerical operations for image and vector data processing\n\n### Environment Configuration\n- **Environment Variables**: OpenAI API key configuration through environment variables\n- **File System**: Local file storage for uploads and outputs with automatic directory creation\n\n## Recent Changes (October 2025)\n\n### Boundary Highlighting System (October 2025)\n**Issues Fixed**: \n1. Entity extraction failing (returning 0 entities)\n2. Perimeter detection finding wrong segments due to dimension/annotation outliers\n3. All walls classified as interior (0 exterior detected)\n4. Drawing individual line segments instead of continuous boundaries\n\n**Solutions Implemented**:\n\n1. **Fixed Entity Extraction**:\n   - Added stateless extraction method to avoid state corruption\n   - Fixed issue where `current_doc` was being overwritten before extraction\n   - Now successfully extracts 5,000+ entities from architectural drawings\n\n2. **Improved Perimeter Detection**:\n   - Implemented 2% percentile-based bounds trimming to exclude dimension/annotation outliers\n   - Adaptive tolerance based on building size (1% of smaller dimension, minimum 5 units)\n   - Increased perimeter detection from 3-11 segments to 200+ segments\n\n3. **Smart Wall Classification**:\n   - Prioritizes longest segments first for better main wall detection\n   - Forgiving multi-criteria classification:\n     * ‚â•3 perimeter segments = exterior\n     * >30% perimeter segments = exterior  \n     * Long wall (>200 units) touching perimeter = exterior\n   - Successfully identifies 20-30 exterior groups and 400+ interior groups\n\n4. **Continuous Boundary Tracing**:\n   - Groups connected segments into continuous polylines\n   - Traces outer boundaries (building perimeter) as complete paths\n   - Traces inner boundaries (interior walls) as complete paths\n   - Uses connection tolerance of 2.0 units with bidirectional extension\n\n**Visual Output**:\n- **Outer boundaries (exterior)**: Yellow polylines on `[floor] exterior line` layer\n- **Inner boundaries (interior)**: Magenta polylines on `[floor] interior line` layer\n- Doors: Green on element-specific layers\n- Windows: Blue on element-specific layers\n\n**Performance**:\n- Processes up to 1,500 prioritized segments for grouping\n- Handles large architectural drawings (7,000+ segments)\n- Completes analysis in under 30 seconds\n\n### Replit Environment Setup (Completed October 1, 2025)\n- **Flask Web App**: Running on port 5000 with webview output ‚úì\n- **Workflow**: Configured with `uv run python main.py` ‚úì\n- **Deployment**: Autoscale deployment with gunicorn configured ‚úì\n- **Environment Secrets**: \n  - SESSION_SECRET: Configured ‚úì\n  - OPENAI_API_KEY: Configured ‚úì\n- **Dependencies**: All Python packages installed via uv (pyproject.toml) ‚úì\n- **Web Interface**: Accessible and fully functional ‚úì\n- **Git Configuration**: .gitignore updated with uv/Python entries ‚úì\n- **Project Structure**:\n  - `/src` - Core modules (architectural_analyzer.py, autocad_integration.py, enhanced_geometry_processor.py)\n  - `/templates` - Flask HTML templates\n  - `/uploads` - User uploaded DXF files\n  - `/outputs` - Processed DXF files and measurements\n  - `app.py` - Main Flask application with proxy fix for Replit\n  - `main.py` - Application entry point\n  - `demo.py` - Command-line demo (optional)\n\n**GitHub Import Complete**: Fresh clone successfully configured and running in Replit environment with all dependencies, workflows, and deployment settings properly configured.","size_bytes":6704},"src/__init__.py":{"content":"# AI-Powered AutoCAD Plugin Package","size_bytes":35},"src/architectural_analyzer.py":{"content":"import os\nimport json\nimport base64\nimport cv2\nimport numpy as np\nfrom PIL import Image\nfrom openai import OpenAI\nimport ezdxf\nfrom typing import Dict, List, Tuple, Optional\n\n# the newest OpenAI model is \"gpt-4o\" which was released August 7, 2025.\n# do not change this unless explicitly requested by the user\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\nopenai = None\nif OPENAI_API_KEY:\n    openai = OpenAI(api_key=OPENAI_API_KEY)\nelse:\n    print(\"Warning: OPENAI_API_KEY not found. AI analysis will be disabled.\")\n\nclass ArchitecturalAnalyzer:\n    \"\"\"\n    AI-powered architectural drawing analyzer that can:\n    1. Detect floor plans vs elevations\n    2. Identify interior/exterior walls, garage spaces, doors, windows\n    3. Generate proper layer names for AutoCAD\n    4. Trace walls and create AutoCAD-compatible output\n    \"\"\"\n\n    def __init__(self):\n        self.layer_names = {\n            'basement': {\n                'interior': 'basement_interior_wall',\n                'exterior': 'basement_exterior_wall'\n            },\n            'main_floor': {\n                'interior': 'main_floor_interior_wall',\n                'exterior': 'main_floor_exterior_wall',\n                'garage': 'main_floor_garage_wall'\n            },\n            'second_floor': {\n                'interior': 'second_floor_interior_wall',\n                'exterior': 'second_floor_exterior_wall'\n            },\n            'doors': {\n                'front': 'front_door_main',\n                'back': 'back_door_main',\n                'patio': 'patio_door_main',\n                'garage': 'garage_door_main'\n            },\n            'windows': {\n                'front': 'front_window_main',\n                'back': 'back_window_main',\n                'side': 'side_window_main',\n                'door': 'door_window_main'\n            }\n        }\n\n    def encode_image_to_base64(self, image_path: str) -> str:\n        \"\"\"Convert image file to base64 string for OpenAI API\"\"\"\n        with open(image_path, \"rb\") as image_file:\n            return base64.b64encode(image_file.read()).decode('utf-8')\n\n    def analyze_drawing_type(self, image_path: str) -> Dict:\n        \"\"\"\n        Determine if the drawing is a floor plan or elevation using AI\n        \"\"\"\n        if not openai:\n            raise Exception(\"OpenAI API key not configured. Please set up your OpenAI API key to use AI analysis features.\")\n\n        base64_image = self.encode_image_to_base64(image_path)\n\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are an expert in architectural drawings. Analyze the image and determine if it's a floor plan (top-down view showing room layouts) or an elevation (side view showing the exterior facade of a building). Respond with JSON format: {'type': 'floor_plan' or 'elevation', 'confidence': 0.0-1.0, 'reasoning': 'explanation'}\"\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Analyze this architectural drawing and determine if it's a floor plan or elevation view.\"\n                        },\n                        {\n                            \"type\": \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                        }\n                    ]\n                }\n            ],\n            response_format={\"type\": \"json_object\"},\n            timeout=20.0\n        )\n\n        content = response.choices[0].message.content\n        if content is None:\n            raise ValueError(\"Empty response content from OpenAI API for drawing type analysis\")\n        try:\n            result = json.loads(content)\n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Failed to decode JSON response from OpenAI API: {e}. Response content: {content}\")\n        return result\n\n    def analyze_floor_plan(self, image_path: str) -> Dict:\n        \"\"\"\n        Analyze floor plan to detect walls, rooms, and spaces\n        \"\"\"\n        if not openai:\n            raise Exception(\"OpenAI API key not configured. Please set up your OpenAI API key to use AI analysis features.\")\n\n        base64_image = self.encode_image_to_base64(image_path)\n\n        prompt = \"\"\"\n        You are an expert architectural analyst. Analyze this floor plan and identify:\n\n        1. Floor type (basement, main_floor, second_floor, etc.)\n        2. Interior walls (walls inside the house)\n        3. Exterior walls (walls forming the house perimeter)\n        4. Garage spaces (unheated but enclosed areas)\n        5. Buffered/protected walls (walls adjacent to garage or other unheated spaces)\n        6. Room types and their boundaries\n\n        For each wall or space, provide coordinates where lines should be drawn to trace:\n        - Interior walls\n        - Exterior walls  \n        - Garage-adjacent walls (different from full exterior)\n\n        Respond in JSON format with:\n        {\n            \"floor_type\": \"basement/main_floor/second_floor\",\n            \"spaces\": [\n                {\n                    \"type\": \"interior/exterior/garage_adjacent\",\n                    \"coordinates\": [[x1,y1], [x2,y2], ...],\n                    \"layer_name\": \"suggested_layer_name\"\n                }\n            ],\n            \"rooms\": [\n                {\n                    \"type\": \"living_room/kitchen/garage/etc\",\n                    \"boundaries\": [[x1,y1], [x2,y2], ...]\n                }\n            ]\n        }\n        \"\"\"\n\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": prompt\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Analyze this floor plan drawing for wall detection and space identification.\"\n                        },\n                        {\n                            \"type\": \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                        }\n                    ]\n                }\n            ],\n            response_format={\"type\": \"json_object\"},\n            timeout=20.0\n        )\n\n        content = response.choices[0].message.content\n        if content is None:\n            raise ValueError(\"Empty response content from OpenAI API for floor plan analysis\")\n        try:\n            result = json.loads(content)\n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Failed to decode JSON response from OpenAI API: {e}. Response content: {content}\")\n        return result\n\n    def analyze_elevation(self, image_path: str) -> Dict:\n        \"\"\"\n        Analyze elevation to detect doors, windows, and their dimensions\n        \"\"\"\n        if not openai:\n            raise Exception(\"OpenAI API key not configured. Please set up your OpenAI API key to use AI analysis features.\")\n\n        base64_image = self.encode_image_to_base64(image_path)\n\n        prompt = \"\"\"\n        You are an expert architectural analyst. Analyze this elevation drawing and identify:\n\n        1. Elevation direction (front, back, left, right)\n        2. Doors (front door, patio door, etc.) with dimensions if visible\n        3. Windows with their locations and sizes\n        4. Door windows (windows within doors)\n\n        For each element, provide:\n        - Type (door/window)\n        - Subtype (front_door, patio_door, regular_window, door_window)\n        - Coordinates for drawing the element outline\n        - Dimensions if visible (e.g., \"36x80\" for doors)\n        - Floor level (main, basement, second, etc.)\n\n        Respond in JSON format with:\n        {\n            \"elevation_direction\": \"front/back/left/right\",\n            \"elements\": [\n                {\n                    \"type\": \"door/window\",\n                    \"subtype\": \"front_door/patio_door/window/door_window\",\n                    \"coordinates\": [[x1,y1], [x2,y2], [x3,y3], [x4,y4]],\n                    \"dimensions\": \"36x80\" or null,\n                    \"floor_level\": \"main/basement/second\",\n                    \"layer_name\": \"suggested_layer_name\"\n                }\n            ]\n        }\n        \"\"\"\n\n        response = openai.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": prompt\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"text\",\n                            \"text\": \"Analyze this elevation drawing for door and window detection.\"\n                        },\n                        {\n                            \"type\": \"image_url\",\n                            \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}\n                        }\n                    ]\n                }\n            ],\n            response_format={\"type\": \"json_object\"},\n            timeout=20.0\n        )\n\n        content = response.choices[0].message.content\n        if content is None:\n            raise ValueError(\"Empty response content from OpenAI API for elevation analysis\")\n        try:\n            result = json.loads(content)\n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Failed to decode JSON response from OpenAI API: {e}. Response content: {content}\")\n        return result\n\n    def process_drawing(self, image_path: str) -> Dict:\n        \"\"\"\n        Main processing function that analyzes any architectural drawing\n        and returns comprehensive analysis with AutoCAD instructions\n        \"\"\"\n        # First determine drawing type\n        drawing_type_analysis = self.analyze_drawing_type(image_path)\n\n        analysis_type = drawing_type_analysis.get('type')\n        if analysis_type == 'floor_plan':\n            analysis = self.analyze_floor_plan(image_path)\n            analysis['drawing_type'] = 'floor_plan'\n        else:\n            analysis = self.analyze_elevation(image_path)\n            analysis['drawing_type'] = 'elevation'\n\n        analysis['type_analysis'] = drawing_type_analysis\n\n        return analysis\n\n    def analyze_geometric_data(self, geometric_data: Dict, spatial_analysis: Dict) -> Dict:\n        \"\"\"\n        Analyze geometric data using AI to enhance wall classification and spatial understanding\n        \"\"\"\n        if not openai:\n            raise Exception(\"OpenAI API key not configured. Please set up your OpenAI API key to use AI analysis features.\")\n\n        try:\n            print(\"Starting OpenAI API call for geometric analysis...\")\n            # Prepare geometric data summary for AI analysis\n            analysis_prompt = self._create_geometric_analysis_prompt(geometric_data, spatial_analysis)\n\n            # Use shorter, more focused prompts for faster response\n            response = openai.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\n                        \"role\": \"system\",\n                        \"content\": \"You are an expert architectural analyst. Analyze DXF geometric data and classify walls as interior/exterior. Respond in JSON format with your analysis. Be concise and fast.\"\n                    },\n                    {\n                        \"role\": \"user\",\n                        \"content\": analysis_prompt[:2000]  # Limit prompt size for faster processing\n                    }\n                ],\n                response_format={\"type\": \"json_object\"},\n                timeout=8.0,  # Reduced to 8 seconds for faster fallback\n                max_completion_tokens=500  # Limit response size for speed\n            )\n\n            content = response.choices[0].message.content\n            if content is None:\n                raise ValueError(\"Empty response content from OpenAI API\")\n            \n            try:\n                ai_analysis = json.loads(content)\n            except json.JSONDecodeError as e:\n                raise ValueError(f\"Failed to decode JSON response from OpenAI API: {e}. Response content: {content}\")\n\n            # Enhance the spatial analysis with AI insights\n            enhanced_analysis = self._merge_ai_with_geometric_analysis(ai_analysis, spatial_analysis)\n\n            print(\"‚úÖ AI-enhanced geometric analysis completed successfully\")\n            return enhanced_analysis\n\n        except Exception as e:\n            # More specific error handling for different timeout scenarios and JSON parsing\n            if \"timeout\" in str(e).lower() or \"timed out\" in str(e).lower():\n                error_msg = \"Request timed out\"\n            elif isinstance(e, ValueError) and \"Failed to decode JSON response\" in str(e):\n                error_msg = f\"API response not valid JSON: {str(e)}\"\n            else:\n                error_msg = f\"API error: {str(e)}\"\n            print(f\"‚ö†Ô∏è AI analysis failed: {error_msg}\")\n            raise Exception(error_msg)\n\n    def _create_geometric_analysis_prompt(self, geometric_data: Dict, spatial_analysis: Dict) -> str:\n        \"\"\"Create a prompt for AI analysis of geometric data\"\"\"\n\n        # Summarize the geometric data\n        entities_summary = geometric_data.get('entities_extracted', {})\n        wall_groups = spatial_analysis.get('wall_groups_found', 0)\n        building_bounds = spatial_analysis.get('building_bounds', {})\n\n        prompt = f\"\"\"\n        Analyze this architectural DXF file geometric data:\n\n        GEOMETRIC ENTITIES FOUND:\n        - Lines: {entities_summary.get('lines', 0)}\n        - Polylines: {entities_summary.get('polylines', 0)}\n        - Arcs: {entities_summary.get('arcs', 0)}\n        - Circles: {entities_summary.get('circles', 0)}\n\n        SPATIAL ANALYSIS:\n        - Wall groups identified: {wall_groups}\n        - Building dimensions: {building_bounds.get('width', 'unknown')} x {building_bounds.get('height', 'unknown')} units\n        - Building bounds: {building_bounds}\n\n        WALL GROUP DETAILS:\n        \"\"\"\n\n        # Add details about each wall group from spatial analysis\n        if 'wall_groups' in spatial_analysis:\n            for i, group in enumerate(spatial_analysis['wall_groups'][:5]):  # Limit to first 5 for prompt size\n                prompt += f\"\"\"\n        Wall Group {i+1}:\n        - Total length: {group.get('total_length', 0):.1f} units\n        - Segment count: {len(group.get('segments', []))}\n        - Layers involved: {list(group.get('layers', set()))}\n        - Bounds: {group.get('bounds', {})}\n        \"\"\"\n\n        prompt += \"\"\"\n\n        ANALYSIS REQUIRED:\n        Based on this geometric data, provide architectural classification:\n\n        1. For each wall group, determine:\n           - Type: 'exterior', 'interior', or 'garage_adjacent'\n           - Reasoning based on position, connectivity, and architectural logic\n           - Confidence level (0.0-1.0)\n\n        2. Identify potential room spaces and their characteristics\n\n        3. Suggest appropriate layer naming following these patterns:\n           - Exterior walls: '[floor]_exterior_wall_[n]' \n           - Interior walls: '[floor]_interior_wall_[n]'\n           - Garage walls: '[floor]_garage_wall_[n]'\n\n        Respond in JSON format:\n        {\n            \"wall_classifications\": [\n                {\n                    \"group_index\": 0,\n                    \"type\": \"exterior/interior/garage_adjacent\",\n                    \"confidence\": 0.0-1.0,\n                    \"reasoning\": \"explanation\",\n                    \"suggested_layer\": \"layer_name\"\n                }\n            ],\n            \"spatial_insights\": {\n                \"building_type\": \"residential/commercial/mixed\",\n                \"floor_count_estimate\": 1-3,\n                \"has_garage\": true/false,\n                \"architectural_style\": \"description\"\n            },\n            \"recommendations\": [\n                \"specific suggestions for layer organization or analysis improvements\"\n            ]\n        }\n        \"\"\"\n\n        return prompt\n\n    def _merge_ai_with_geometric_analysis(self, ai_analysis: Dict, spatial_analysis: Dict) -> Dict:\n        \"\"\"Merge AI insights with geometric analysis results\"\"\"\n\n        enhanced_analysis = spatial_analysis.copy()\n        enhanced_analysis['ai_insights'] = ai_analysis\n\n        # Apply AI classifications to wall groups\n        wall_classifications = ai_analysis.get('wall_classifications', [])\n\n        if 'wall_groups' in enhanced_analysis:\n            for classification in wall_classifications:\n                group_index = classification.get('group_index', 0)\n                if group_index < len(enhanced_analysis['wall_groups']):\n                    group = enhanced_analysis['wall_groups'][group_index]\n                    group['ai_classification'] = {\n                        'type': classification.get('type', 'interior'),\n                        'confidence': classification.get('confidence', 0.5),\n                        'reasoning': classification.get('reasoning', ''),\n                        'suggested_layer': classification.get('suggested_layer', '')\n                    }\n\n        # Add spatial insights\n        enhanced_analysis['spatial_insights'] = ai_analysis.get('spatial_insights', {})\n        enhanced_analysis['ai_recommendations'] = ai_analysis.get('recommendations', [])\n\n        return enhanced_analysis\n\n    def _create_basic_analysis(self, geometric_data: Dict, spatial_analysis: Dict) -> Dict:\n        \"\"\"Create basic analysis when AI is not available\"\"\"\n\n        basic_analysis = spatial_analysis.copy()\n        basic_analysis['ai_insights'] = {\n            \"note\": \"AI analysis not available - using geometric analysis only\",\n            \"wall_classifications\": [],\n            \"spatial_insights\": {\n                \"building_type\": \"unknown\",\n                \"analysis_method\": \"geometric_only\"\n            }\n        }\n\n        return basic_analysis\n\n    def generate_autocad_commands(self, analysis: Dict) -> List[str]:\n        \"\"\"\n        Generate AutoCAD command sequence based on analysis results\n        \"\"\"\n        commands = []\n\n        if analysis['drawing_type'] == 'floor_plan':\n            # Generate commands for wall tracing\n            for space in analysis.get('spaces', []):\n                layer_name = space['layer_name']\n                coords = space['coordinates']\n\n                # Create layer\n                commands.append(f\"-LAYER M {layer_name}\")\n\n                # Draw polyline for wall tracing\n                if len(coords) > 1:\n                    polyline_cmd = \"PLINE \"\n                    for coord in coords:\n                        polyline_cmd += f\"{coord[0]},{coord[1]} \"\n                    polyline_cmd += \"C\"  # Close polyline\n                    commands.append(polyline_cmd)\n\n        elif analysis['drawing_type'] == 'elevation':\n            # Generate commands for doors and windows\n            for element in analysis.get('elements', []):\n                layer_name = element['layer_name']\n                coords = element['coordinates']\n\n                # Create layer\n                commands.append(f\"-LAYER M {layer_name}\")\n\n                # Draw rectangle for door/window\n                if len(coords) >= 4:\n                    rect_cmd = f\"RECTANG {coords[0][0]},{coords[0][1]} {coords[2][0]},{coords[2][1]}\"\n                    commands.append(rect_cmd)\n\n        return commands\n\ndef main():\n    \"\"\"\n    Example usage of the ArchitecturalAnalyzer\n    \"\"\"\n    analyzer = ArchitecturalAnalyzer()\n\n    # Example usage - you would replace this with actual file paths\n    print(\"Architectural Drawing Analyzer initialized\")\n    print(\"Ready to process AutoCAD drawings and PDFs\")\n    print(\"\\nSupported operations:\")\n    print(\"1. Detect floor plans vs elevations\")\n    print(\"2. Trace interior/exterior walls\")\n    print(\"3. Identify garage and buffered spaces\")\n    print(\"4. Detect doors and windows in elevations\")\n    print(\"5. Generate proper AutoCAD layer names\")\n    print(\"6. Create AutoCAD command sequences\")\n\nif __name__ == \"__main__\":\n    main()","size_bytes":20377},"src/autocad_integration.py":{"content":"import ezdxf\nimport os\nfrom typing import List, Dict, Tuple, Optional, Any, Union\nimport cv2\nimport numpy as np\nfrom PIL import Image\nimport math\nfrom collections import defaultdict\nfrom .enhanced_geometry_processor import EnhancedGeometryProcessor\n\nclass AutoCADIntegration:\n    \"\"\"\n    Handles AutoCAD file operations and layer management\n    \"\"\"\n    \n    def __init__(self):\n        self.current_doc = None\n        self.modelspace = None\n        self.enhanced_processor = EnhancedGeometryProcessor()\n    \n    def load_dxf_file(self, file_path: str) -> bool:\n        \"\"\"Load an existing DXF or DWG file\"\"\"\n        try:\n            # Check file extension\n            file_ext = os.path.splitext(file_path)[1].lower()\n            \n            if file_ext == '.dwg':\n                print(\"DWG files are not directly supported by ezdxf. Please convert to DXF format.\")\n                return False\n            \n            # Type-safe access to ezdxf.readfile\n            readfile_func = getattr(ezdxf, 'readfile', None)\n            if readfile_func is None:\n                print(\"Error: ezdxf.readfile not available\")\n                return False\n            self.current_doc = readfile_func(file_path)\n            self.modelspace = self.current_doc.modelspace()\n            print(f\"Successfully loaded DXF file: {file_path}\")\n            return True\n        except Exception as e:\n            print(f\"Error loading file: {e}\")\n            if 'DWG' in str(e).upper():\n                print(\"Note: DWG files require conversion to DXF format for processing.\")\n            return False\n    \n    def create_new_dxf(self) -> bool:\n        \"\"\"Create a new DXF document\"\"\"\n        try:\n            # Type-safe access to ezdxf.new\n            new_func = getattr(ezdxf, 'new', None)\n            if new_func is None:\n                print(\"Error: ezdxf.new not available\")\n                return False\n            self.current_doc = new_func('R2010')\n            self.modelspace = self.current_doc.modelspace()\n            print(\"Created new DXF document\")\n            return True\n        except Exception as e:\n            print(f\"Error creating new DXF document: {e}\")\n            return False\n    \n    def create_layer(self, layer_name: str, color: int = 7, linetype: str = 'CONTINUOUS'):\n        \"\"\"Create a new layer in the DXF file\"\"\"\n        if self.current_doc is None:\n            print(\"No DXF document loaded\")\n            return False\n        \n        try:\n            layers = self.current_doc.layers\n            if layer_name not in layers:\n                layer = layers.new(name=layer_name)\n                # Type-safe attribute setting\n                if hasattr(layer, 'color'):\n                    layer.color = color\n                if hasattr(layer.dxf, 'linetype'):\n                    layer.dxf.linetype = linetype\n                print(f\"Created layer: {layer_name}\")\n            else:\n                print(f\"Layer {layer_name} already exists\")\n            return True\n        except Exception as e:\n            print(f\"Error creating layer {layer_name}: {e}\")\n            return False\n    \n    def draw_polyline(self, coordinates: List[Tuple[float, float]], layer_name: str = \"0\", closed: bool = False):\n        \"\"\"Draw a polyline on the specified layer\"\"\"\n        if self.current_doc is None or self.modelspace is None:\n            print(\"No DXF document loaded\")\n            return False\n        \n        try:\n            # LWPOLYLINE expects 2D points (x, y) not 3D\n            points_2d = [(float(x), float(y)) for x, y in coordinates]\n            \n            polyline = self.modelspace.add_lwpolyline(points_2d)\n            polyline.dxf.layer = layer_name\n            \n            # Set closed flag if specified\n            if closed and len(points_2d) > 2:\n                polyline.close(True)\n            \n            print(f\"Drew polyline with {len(coordinates)} points on layer {layer_name}\")\n            return True\n        except Exception as e:\n            print(f\"Error drawing polyline: {e}\")\n            return False\n    \n    def draw_rectangle(self, point1: Tuple[float, float], point2: Tuple[float, float], layer_name: str = \"0\"):\n        \"\"\"Draw a rectangle between two points\"\"\"\n        if self.current_doc is None or self.modelspace is None:\n            print(\"No DXF document loaded\")\n            return False\n        \n        try:\n            x1, y1 = point1\n            x2, y2 = point2\n            \n            # Create rectangle coordinates\n            rectangle_points = [\n                (x1, y1),\n                (x2, y1),\n                (x2, y2),\n                (x1, y2),\n                (x1, y1)  # Close the rectangle\n            ]\n            \n            return self.draw_polyline(rectangle_points, layer_name)\n        except Exception as e:\n            print(f\"Error drawing rectangle: {e}\")\n            return False\n    \n    def draw_line(self, start_point: Tuple[float, float], end_point: Tuple[float, float], layer_name: str = \"0\"):\n        \"\"\"Draw a single line\"\"\"\n        if self.current_doc is None or self.modelspace is None:\n            print(\"No DXF document loaded\")\n            return False\n        \n        try:\n            start_3d = (start_point[0], start_point[1], 0)\n            end_3d = (end_point[0], end_point[1], 0)\n            \n            line = self.modelspace.add_line(start_3d, end_3d)\n            line.dxf.layer = layer_name\n            print(f\"Drew line from {start_point} to {end_point} on layer {layer_name}\")\n            return True\n        except Exception as e:\n            print(f\"Error drawing line: {e}\")\n            return False\n    \n    def draw_arc(self, center: Tuple[float, float], radius: float, start_angle: float, \n                 end_angle: float, layer_name: str = \"0\"):\n        \"\"\"Draw an arc\"\"\"\n        if self.current_doc is None or self.modelspace is None:\n            print(\"No DXF document loaded\")\n            return False\n        \n        try:\n            center_3d = (center[0], center[1], 0)\n            arc = self.modelspace.add_arc(center_3d, radius, start_angle, end_angle)\n            arc.dxf.layer = layer_name\n            print(f\"Drew arc with radius {radius} on layer {layer_name}\")\n            return True\n        except Exception as e:\n            print(f\"Error drawing arc: {e}\")\n            return False\n    \n    def save_dxf(self, output_path: str):\n        \"\"\"Save the current DXF document\"\"\"\n        if self.current_doc is None:\n            print(\"No DXF document to save\")\n            return False\n        \n        try:\n            self.current_doc.saveas(output_path)\n            print(f\"Saved DXF file to: {output_path}\")\n            return True\n        except Exception as e:\n            print(f\"Error saving DXF file: {e}\")\n            return False\n    \n    def list_layers(self):\n        \"\"\"List all layers in the current document\"\"\"\n        if self.current_doc is None:\n            print(\"No DXF document loaded\")\n            return []\n        \n        layers = []\n        for layer in self.current_doc.layers:\n            layers.append({\n                'name': layer.dxf.name,\n                'color': layer.dxf.color,\n                'linetype': layer.dxf.linetype\n            })\n        \n        return layers\n    \n    def execute_autocad_commands(self, analysis_result: Dict):\n        \"\"\"\n        Execute AutoCAD drawing commands based on enhanced analysis results\n        \"\"\"\n        if self.current_doc is None:\n            print(\"No DXF document loaded. Creating new document.\")\n            self.create_new_dxf()\n        \n        commands_executed = 0\n        \n        # Handle enhanced drawing commands if available and non-empty\n        drawing_commands = analysis_result.get('drawing_commands', [])\n        if drawing_commands and len(drawing_commands) > 0:\n            commands_count = self._execute_enhanced_commands(drawing_commands)\n            if commands_count > 0:\n                return commands_count\n            else:\n                print(\"Warning: Enhanced commands executed but drew nothing. Falling back to legacy processing...\")\n        \n        # Fallback to legacy command processing\n        \n        if analysis_result['drawing_type'] == 'floor_plan':\n            print(\"Processing floor plan analysis...\")\n            \n            # Process spaces (walls)\n            for space in analysis_result.get('spaces', []):\n                layer_name = space['layer_name']\n                coordinates = space['coordinates']\n                \n                # Create layer\n                color = self.get_layer_color(space['type'])\n                self.create_layer(layer_name, color)\n                \n                # Draw the wall trace\n                if len(coordinates) > 1:\n                    self.draw_polyline(coordinates, layer_name)\n                    commands_executed += 1\n        \n        elif analysis_result['drawing_type'] == 'elevation':\n            print(\"Processing elevation analysis...\")\n            \n            # Process doors and windows\n            for element in analysis_result.get('elements', []):\n                layer_name = element['layer_name']\n                coordinates = element['coordinates']\n                \n                # Create layer\n                color = self.get_layer_color(element['type'])\n                self.create_layer(layer_name, color)\n                \n                # Draw rectangle for door/window\n                if len(coordinates) >= 4:\n                    point1 = coordinates[0]\n                    point2 = coordinates[2]  # Diagonal point\n                    self.draw_rectangle(point1, point2, layer_name)\n                    commands_executed += 1\n        \n        print(f\"Executed {commands_executed} drawing commands\")\n        return commands_executed\n    \n    def _execute_enhanced_commands(self, drawing_commands: List[Dict]) -> int:\n        \"\"\"\n        Execute enhanced drawing commands from the enhanced geometry processor\n        \"\"\"\n        commands_executed = 0\n        layers_created = set()\n        \n        print(f\"Executing {len(drawing_commands)} enhanced drawing commands...\")\n        \n        for command in drawing_commands:\n            try:\n                action = command.get('action')\n                \n                if action == 'create_layer':\n                    layer_name = command.get('layer_name')\n                    color = command.get('color', 7)\n                    linetype = command.get('linetype', 'CONTINUOUS')\n                    \n                    if layer_name and layer_name not in layers_created:\n                        success = self.create_layer(layer_name, color, linetype)\n                        if success:\n                            layers_created.add(layer_name)\n                            commands_executed += 1\n                \n                elif action == 'draw_line':\n                    start_point = command.get('start_point')\n                    end_point = command.get('end_point')\n                    layer_name = command.get('layer_name', '0')\n                    \n                    if start_point and end_point:\n                        success = self.draw_line(start_point, end_point, layer_name)\n                        if success:\n                            commands_executed += 1\n                \n                elif action == 'draw_rectangle':\n                    point1 = command.get('point1')\n                    point2 = command.get('point2')\n                    layer_name = command.get('layer_name', '0')\n                    \n                    if point1 and point2:\n                        success = self.draw_rectangle(point1, point2, layer_name)\n                        if success:\n                            commands_executed += 1\n                \n                elif action == 'draw_arc':\n                    center = command.get('center')\n                    radius = command.get('radius')\n                    start_angle = command.get('start_angle', 0)\n                    end_angle = command.get('end_angle', 90)\n                    layer_name = command.get('layer_name', '0')\n                    \n                    if center and radius:\n                        success = self.draw_arc(center, radius, start_angle, end_angle, layer_name)\n                        if success:\n                            commands_executed += 1\n                \n                elif action == 'draw_polyline':\n                    coordinates = command.get('coordinates')\n                    layer_name = command.get('layer_name', '0')\n                    \n                    if coordinates and len(coordinates) >= 2:\n                        success = self.draw_polyline(coordinates, layer_name)\n                        if success:\n                            commands_executed += 1\n                \n                else:\n                    print(f\"Unknown command action: {action}\")\n            \n            except Exception as e:\n                print(f\"Error executing command {action}: {e}\")\n        \n        print(f\"Successfully executed {commands_executed} enhanced drawing commands\")\n        return commands_executed\n    \n    def export_measurements(self, measurements: Dict, output_dir: str = 'outputs') -> Dict[str, str]:\n        \"\"\"\n        Export measurements to CSV and JSON formats\n        \"\"\"\n        import os\n        os.makedirs(output_dir, exist_ok=True)\n        \n        csv_path = os.path.join(output_dir, 'measurements.csv')\n        json_path = os.path.join(output_dir, 'measurements.json')\n        \n        results = {}\n        \n        # Export to CSV\n        if self.enhanced_processor.export_measurements_csv(measurements, csv_path):\n            results['csv'] = csv_path\n        \n        # Export to JSON\n        if self.enhanced_processor.export_measurements_json(measurements, json_path):\n            results['json'] = json_path\n        \n        return results\n    \n    def get_layer_color(self, element_type: str) -> int:\n        \"\"\"Get appropriate color for different element types\"\"\"\n        color_map = {\n            'interior': 1,      # Red\n            'exterior': 2,      # Yellow\n            'garage_adjacent': 3, # Green\n            'door': 4,          # Cyan\n            'window': 5,        # Blue\n            'garage': 6         # Magenta\n        }\n        return color_map.get(element_type, 7)  # Default white\n\n    def extract_geometric_entities(self) -> Dict[str, List]:\n        \"\"\"\n        Extract all geometric entities from the loaded DXF document\n        Returns a dictionary with entity types and their data\n        \"\"\"\n        if self.current_doc is None or self.modelspace is None:\n            print(\"No DXF document loaded\")\n            return {}\n        \n        # Use stateless extraction to avoid state corruption issues\n        return self._extract_entities_from_modelspace(self.modelspace)\n    \n    def _extract_entities_from_modelspace(self, modelspace) -> Dict[str, List]:\n        \"\"\"\n        Stateless extraction method that doesn't rely on instance state\n        \"\"\"\n        entities = {\n            'lines': [],\n            'polylines': [],\n            'lwpolylines': [],\n            'arcs': [],\n            'circles': [],\n            'splines': [],\n            'blocks': [],\n            'text': []\n        }\n\n        try:\n            entity_count = 0\n            for entity in modelspace:\n                entity_count += 1\n                entity_type = entity.dxftype()\n                \n                if entity_type == 'LINE':\n                    entities['lines'].append({\n                        'start': (entity.dxf.start.x, entity.dxf.start.y),\n                        'end': (entity.dxf.end.x, entity.dxf.end.y),\n                        'layer': entity.dxf.layer,\n                        'length': math.sqrt((entity.dxf.end.x - entity.dxf.start.x)**2 + \n                                          (entity.dxf.end.y - entity.dxf.start.y)**2)\n                    })\n                \n                elif entity_type == 'LWPOLYLINE':\n                    # Type-safe access to entity methods and attributes\n                    get_points_method = getattr(entity, 'get_points', None)\n                    if get_points_method is not None:\n                        try:\n                            points_data = get_points_method('xy')\n                            points = [(point[0], point[1]) for point in points_data]\n                        except (IndexError, TypeError):\n                            # Fallback to vertices method\n                            vertices_method = getattr(entity, 'vertices', None)\n                            if vertices_method is not None:\n                                points = list(vertices_method())\n                            else:\n                                points = []\n                    else:\n                        points = []\n                    \n                    # Type-safe access to closed attribute\n                    is_closed = getattr(entity, 'closed', False)\n                    \n                    entities['lwpolylines'].append({\n                        'points': points,\n                        'layer': getattr(entity.dxf, 'layer', '0'),\n                        'closed': is_closed,\n                        'area': self._calculate_polygon_area(points) if is_closed else 0\n                    })\n                \n                elif entity_type == 'POLYLINE':\n                    # Type-safe access to vertices\n                    vertices_attr = getattr(entity, 'vertices', None)\n                    if vertices_attr is not None:\n                        try:\n                            points = []\n                            for vertex in vertices_attr:\n                                if hasattr(vertex, 'dxf') and hasattr(vertex.dxf, 'location'):\n                                    location = vertex.dxf.location\n                                    if hasattr(location, 'x') and hasattr(location, 'y'):\n                                        points.append((location.x, location.y))\n                        except (AttributeError, TypeError):\n                            points = []\n                    else:\n                        points = []\n                    \n                    # Type-safe access to is_closed method\n                    is_closed_method = getattr(entity, 'is_closed', None)\n                    if callable(is_closed_method):\n                        try:\n                            is_closed = is_closed_method()\n                        except Exception:\n                            is_closed = False\n                    else:\n                        is_closed = False\n                    \n                    entities['polylines'].append({\n                        'points': points,\n                        'layer': getattr(entity.dxf, 'layer', '0'),\n                        'closed': is_closed,\n                        'area': self._calculate_polygon_area(points) if is_closed else 0\n                    })\n                \n                elif entity_type == 'ARC':\n                    entities['arcs'].append({\n                        'center': (entity.dxf.center.x, entity.dxf.center.y),\n                        'radius': entity.dxf.radius,\n                        'start_angle': entity.dxf.start_angle,\n                        'end_angle': entity.dxf.end_angle,\n                        'layer': entity.dxf.layer\n                    })\n                \n                elif entity_type == 'CIRCLE':\n                    entities['circles'].append({\n                        'center': (entity.dxf.center.x, entity.dxf.center.y),\n                        'radius': entity.dxf.radius,\n                        'layer': entity.dxf.layer,\n                        'area': math.pi * entity.dxf.radius**2\n                    })\n\n            total_extracted = (len(entities['lines']) + len(entities['lwpolylines']) + \n                             len(entities['polylines']) + len(entities['arcs']) + len(entities['circles']))\n            \n            print(f\"Extracted {len(entities['lines'])} lines, {len(entities['lwpolylines'])} lwpolylines, \"\n                  f\"{len(entities['polylines'])} polylines, {len(entities['arcs'])} arcs, \"\n                  f\"{len(entities['circles'])} circles (total: {total_extracted} from {entity_count} entities)\")\n            \n            # Diagnostic: warn if no entities were extracted from a non-empty modelspace\n            if entity_count > 0 and total_extracted == 0:\n                print(f\"WARNING: Iterated over {entity_count} entities but extracted 0. Check entity types.\")\n            \n            return entities\n\n        except Exception as e:\n            print(f\"Error extracting geometric entities: {e}\")\n            import traceback\n            traceback.print_exc()\n            return {}\n\n\n    def analyze_spatial_relationships(self, entities: Dict[str, List]) -> Dict:\n        \"\"\"\n        Analyze spatial relationships between entities to identify wall patterns\n        \"\"\"\n        analysis = {\n            'potential_walls': [],\n            'enclosed_areas': [],\n            'wall_groups': [],\n            'building_bounds': None\n        }\n\n        try:\n            print(\"Analyzing spatial relationships...\")\n            \n            # Combine all linear entities (lines and polylines) for wall analysis\n            wall_segments = []\n            \n            # Add lines as wall segments\n            print(f\"Processing {len(entities.get('lines', []))} lines...\")\n            for line in entities.get('lines', []):\n                wall_segments.append({\n                    'start': line['start'],\n                    'end': line['end'],\n                    'layer': line['layer'],\n                    'length': line['length'],\n                    'type': 'line'\n                })\n            \n            # Add polyline segments\n            total_polylines = len(entities.get('lwpolylines', [])) + len(entities.get('polylines', []))\n            print(f\"Processing {total_polylines} polylines...\")\n            \n            for polyline in entities.get('lwpolylines', []) + entities.get('polylines', []):\n                points = polyline['points']\n                for i in range(len(points) - 1):\n                    start, end = points[i], points[i + 1]\n                    length = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)\n                    wall_segments.append({\n                        'start': start,\n                        'end': end,\n                        'layer': polyline['layer'],\n                        'length': length,\n                        'type': 'polyline_segment'\n                    })\n\n            print(f\"Total wall segments to analyze: {len(wall_segments)}\")\n            \n            # Group wall segments by connectivity and orientation\n            print(\"Grouping connected wall segments...\")\n            wall_groups = self._group_connected_walls(wall_segments)\n            analysis['wall_groups'] = wall_groups\n\n            print(\"Calculating building bounds...\")\n            # Find building bounds\n            all_points = []\n            for segment in wall_segments:\n                all_points.extend([segment['start'], segment['end']])\n            \n            if all_points:\n                min_x = min(p[0] for p in all_points)\n                max_x = max(p[0] for p in all_points)\n                min_y = min(p[1] for p in all_points)\n                max_y = max(p[1] for p in all_points)\n                analysis['building_bounds'] = {\n                    'min_x': min_x, 'max_x': max_x, \n                    'min_y': min_y, 'max_y': max_y,\n                    'width': max_x - min_x,\n                    'height': max_y - min_y\n                }\n\n            # Identify enclosed areas from closed polylines\n            print(\"Identifying enclosed areas...\")\n            for polyline in entities.get('lwpolylines', []) + entities.get('polylines', []):\n                if polyline.get('closed', False) and polyline.get('area', 0) > 0:\n                    analysis['enclosed_areas'].append({\n                        'points': polyline['points'],\n                        'area': polyline['area'],\n                        'layer': polyline['layer']\n                    })\n\n            print(f\"Spatial analysis complete: {len(wall_groups)} wall groups, {len(analysis['enclosed_areas'])} enclosed areas\")\n            return analysis\n\n        except Exception as e:\n            print(f\"Error analyzing spatial relationships: {e}\")\n            import traceback\n            traceback.print_exc()\n            return analysis\n\n    def _group_connected_walls(self, wall_segments: List[Dict]) -> List[Dict]:\n        \"\"\"Group wall segments that are connected to each other (optimized with spatial indexing)\"\"\"\n        if not wall_segments:\n            return []\n\n        # Use spatial indexing for datasets larger than 1000 segments\n        if len(wall_segments) > 1000:\n            print(f\"Large dataset detected ({len(wall_segments)} segments). Using spatial indexing optimization.\")\n            return self._group_connected_walls_spatial(wall_segments)\n\n        # For very large datasets, use simplified grouping\n        if len(wall_segments) > 5000:\n            print(f\"Very large dataset detected ({len(wall_segments)} segments). Using simplified grouping.\")\n            return self._group_connected_walls_simplified(wall_segments)\n\n        groups = []\n        used_segments = set()\n        tolerance = 1.0\n        max_iterations = min(len(wall_segments), 1000)  # Cap iterations to prevent infinite loops\n\n        import time\n        start_time = time.time()\n        timeout_seconds = 30  # 30 second timeout\n\n        for i, segment in enumerate(wall_segments):\n            if i in used_segments:\n                continue\n\n            # Check timeout\n            if time.time() - start_time > timeout_seconds:\n                print(f\"Wall grouping timed out after {timeout_seconds} seconds. Creating individual groups for remaining segments.\")\n                # Create individual groups for remaining segments\n                for j in range(i, len(wall_segments)):\n                    if j not in used_segments:\n                        groups.append({\n                            'segments': [wall_segments[j]],\n                            'total_length': wall_segments[j]['length'],\n                            'layers': {wall_segments[j]['layer']},\n                            'bounds': self._get_segment_bounds(wall_segments[j])\n                        })\n                break\n\n            # Start a new group with this segment\n            group = {\n                'segments': [segment],\n                'total_length': segment['length'],\n                'layers': {segment['layer']},\n                'bounds': self._get_segment_bounds(segment)\n            }\n            used_segments.add(i)\n\n            # Find all segments connected to this group\n            found_connection = True\n            iterations = 0\n            while found_connection and iterations < max_iterations:\n                found_connection = False\n                iterations += 1\n                \n                # Check timeout periodically\n                if iterations % 100 == 0 and time.time() - start_time > timeout_seconds:\n                    print(f\"Wall grouping timed out during group {len(groups)+1}\")\n                    break\n                \n                for j, other_segment in enumerate(wall_segments):\n                    if j in used_segments:\n                        continue\n\n                    # Check if this segment connects to any segment in the group\n                    if self._segments_connected_simple(group['segments'], other_segment, tolerance):\n                        group['segments'].append(other_segment)\n                        group['total_length'] += other_segment['length']\n                        group['layers'].add(other_segment['layer'])\n                        group['bounds'] = self._update_bounds(group['bounds'], other_segment)\n                        used_segments.add(j)\n                        found_connection = True\n                        break  # Process one connection per iteration\n\n            groups.append(group)\n\n        print(f\"Grouped {len(wall_segments)} segments into {len(groups)} wall groups in {time.time() - start_time:.2f} seconds\")\n        return groups\n\n    def _segments_connected(self, group_segments: List[Dict], segment: Dict, tolerance: float) -> bool:\n        \"\"\"Check if a segment is connected to any segment in a group\"\"\"\n        seg_start, seg_end = segment['start'], segment['end']\n        \n        for group_seg in group_segments:\n            group_start, group_end = group_seg['start'], group_seg['end']\n            \n            # Check if any endpoints are close enough\n            distances = [\n                math.sqrt((seg_start[0] - group_start[0])**2 + (seg_start[1] - group_start[1])**2),\n                math.sqrt((seg_start[0] - group_end[0])**2 + (seg_start[1] - group_end[1])**2),\n                math.sqrt((seg_end[0] - group_start[0])**2 + (seg_end[1] - group_start[1])**2),\n                math.sqrt((seg_end[0] - group_end[0])**2 + (seg_end[1] - group_end[1])**2)\n            ]\n            \n            if min(distances) <= tolerance:\n                return True\n        \n        return False\n\n    def _segments_connected_simple(self, group_segments: List[Dict], segment: Dict, tolerance: float) -> bool:\n        \"\"\"Simplified version for performance - only check connection to most recent segment in group\"\"\"\n        if not group_segments:\n            return False\n            \n        # Only check connection to the last added segment for better performance\n        last_segment = group_segments[-1]\n        seg_start, seg_end = segment['start'], segment['end']\n        group_start, group_end = last_segment['start'], last_segment['end']\n        \n        # Check if any endpoints are close enough\n        distances = [\n            math.sqrt((seg_start[0] - group_start[0])**2 + (seg_start[1] - group_start[1])**2),\n            math.sqrt((seg_start[0] - group_end[0])**2 + (seg_start[1] - group_end[1])**2),\n            math.sqrt((seg_end[0] - group_start[0])**2 + (seg_end[1] - group_start[1])**2),\n            math.sqrt((seg_end[0] - group_end[0])**2 + (seg_end[1] - group_end[1])**2)\n        ]\n        \n        return min(distances) <= tolerance\n\n    def _group_connected_walls_simplified(self, wall_segments: List[Dict]) -> List[Dict]:\n        \"\"\"Simplified grouping for very large datasets - groups by layer and proximity only\"\"\"\n        print(f\"Using simplified grouping for {len(wall_segments)} segments...\")\n        \n        # Group segments by layer first\n        layer_groups = defaultdict(list)\n        for segment in wall_segments:\n            layer_groups[segment['layer']].append(segment)\n        \n        groups = []\n        for layer_name, layer_segments in layer_groups.items():\n            # For each layer, create groups based on spatial proximity\n            if len(layer_segments) <= 100:\n                # Small enough to use normal grouping\n                layer_group = {\n                    'segments': layer_segments,\n                    'total_length': sum(seg['length'] for seg in layer_segments),\n                    'layers': {layer_name},\n                    'bounds': self.enhanced_processor._calculate_segment_bounds(layer_segments)\n                }\n                groups.append(layer_group)\n            else:\n                # Split large layer groups into spatial chunks\n                chunk_size = 50\n                for i in range(0, len(layer_segments), chunk_size):\n                    chunk = layer_segments[i:i+chunk_size]\n                    chunk_group = {\n                        'segments': chunk,\n                        'total_length': sum(seg['length'] for seg in chunk),\n                        'layers': {layer_name},\n                        'bounds': self.enhanced_processor._calculate_segment_bounds(chunk)\n                    }\n                    groups.append(chunk_group)\n        \n        print(f\"Simplified grouping created {len(groups)} groups from {len(layer_groups)} layers\")\n        return groups\n\n    def _group_connected_walls_spatial(self, wall_segments: List[Dict]) -> List[Dict]:\n        \"\"\"Optimized wall grouping using spatial indexing for large datasets\"\"\"\n        if not wall_segments:\n            return []\n\n        # Create spatial index for faster lookups\n        tolerance = 1.0\n        grid_size = 10.0  # Grid cell size for spatial indexing\n        spatial_grid = defaultdict(list)\n\n        # Index all segments by their spatial location\n        for i, segment in enumerate(wall_segments):\n            start, end = segment['start'], segment['end']\n            points = [start, end]\n            \n            for point in points:\n                grid_x = int(point[0] // grid_size)\n                grid_y = int(point[1] // grid_size)\n                # Add to multiple grid cells to handle tolerance\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        spatial_grid[(grid_x + dx, grid_y + dy)].append(i)\n\n        groups = []\n        used_segments = set()\n        \n        for i, segment in enumerate(wall_segments):\n            if i in used_segments:\n                continue\n\n            # Start a new group with this segment\n            group = {\n                'segments': [segment],\n                'total_length': segment['length'],\n                'layers': {segment['layer']},\n                'bounds': self._get_segment_bounds(segment)\n            }\n            used_segments.add(i)\n\n            # Use BFS to find connected segments\n            to_process = [i]\n            \n            while to_process:\n                current_idx = to_process.pop(0)\n                current_segment = wall_segments[current_idx]\n                \n                # Find potential connections using spatial grid\n                candidates = set()\n                start, end = current_segment['start'], current_segment['end']\n                for point in [start, end]:\n                    grid_x = int(point[0] // grid_size)\n                    grid_y = int(point[1] // grid_size)\n                    for dx in [-1, 0, 1]:\n                        for dy in [-1, 0, 1]:\n                            candidates.update(spatial_grid.get((grid_x + dx, grid_y + dy), []))\n\n                # Check actual connections\n                for candidate_idx in candidates:\n                    if candidate_idx in used_segments:\n                        continue\n                    \n                    candidate_segment = wall_segments[candidate_idx]\n                    if self._segments_directly_connected(current_segment, candidate_segment, tolerance):\n                        group['segments'].append(candidate_segment)\n                        group['total_length'] += candidate_segment['length']\n                        group['layers'].add(candidate_segment['layer'])\n                        group['bounds'] = self._update_bounds(group['bounds'], candidate_segment)\n                        used_segments.add(candidate_idx)\n                        to_process.append(candidate_idx)\n\n            groups.append(group)\n\n        print(f\"Spatial indexing: Grouped {len(wall_segments)} segments into {len(groups)} wall groups\")\n        return groups\n\n    def _segments_directly_connected(self, seg1: Dict, seg2: Dict, tolerance: float) -> bool:\n        \"\"\"Check if two segments are directly connected (optimized)\"\"\"\n        seg1_start, seg1_end = seg1['start'], seg1['end']\n        seg2_start, seg2_end = seg2['start'], seg2['end']\n        \n        # Check if any endpoints are close enough\n        distances = [\n            math.sqrt((seg1_start[0] - seg2_start[0])**2 + (seg1_start[1] - seg2_start[1])**2),\n            math.sqrt((seg1_start[0] - seg2_end[0])**2 + (seg1_start[1] - seg2_end[1])**2),\n            math.sqrt((seg1_end[0] - seg2_start[0])**2 + (seg1_end[1] - seg2_start[1])**2),\n            math.sqrt((seg1_end[0] - seg2_end[0])**2 + (seg1_end[1] - seg2_end[1])**2)\n        ]\n        \n        return min(distances) <= tolerance\n\n    def _get_segment_bounds(self, segment: Dict) -> Dict:\n        \"\"\"Get bounding box for a segment\"\"\"\n        start, end = segment['start'], segment['end']\n        return {\n            'min_x': min(start[0], end[0]),\n            'max_x': max(start[0], end[0]),\n            'min_y': min(start[1], end[1]),\n            'max_y': max(start[1], end[1])\n        }\n\n    def _update_bounds(self, bounds: Dict, segment: Dict) -> Dict:\n        \"\"\"Update bounds to include a new segment\"\"\"\n        seg_bounds = self._get_segment_bounds(segment)\n        return {\n            'min_x': min(bounds['min_x'], seg_bounds['min_x']),\n            'max_x': max(bounds['max_x'], seg_bounds['max_x']),\n            'min_y': min(bounds['min_y'], seg_bounds['min_y']),\n            'max_y': max(bounds['max_y'], seg_bounds['max_y'])\n        }\n\n    def classify_wall_types(self, analysis: Dict) -> List[Dict]:\n        \"\"\"\n        Classify wall groups as interior, exterior, or garage-adjacent based on spatial analysis\n        \"\"\"\n        classified_walls = []\n        \n        if not analysis.get('wall_groups') or not analysis.get('building_bounds'):\n            return classified_walls\n\n        building_bounds = analysis['building_bounds']\n        perimeter_tolerance = 5.0  # Distance tolerance for perimeter detection\n\n        try:\n            for group in analysis['wall_groups']:\n                group_bounds = group['bounds']\n                \n                # Determine wall type based on position and characteristics\n                wall_type = 'interior'  # Default\n                \n                # Check if this wall group is on the building perimeter\n                is_perimeter = (\n                    abs(group_bounds['min_x'] - building_bounds['min_x']) <= perimeter_tolerance or\n                    abs(group_bounds['max_x'] - building_bounds['max_x']) <= perimeter_tolerance or\n                    abs(group_bounds['min_y'] - building_bounds['min_y']) <= perimeter_tolerance or\n                    abs(group_bounds['max_y'] - building_bounds['max_y']) <= perimeter_tolerance\n                )\n                \n                if is_perimeter:\n                    wall_type = 'exterior'\n\n                # Check for garage walls based on layer names or area characteristics\n                layer_names = [layer.lower() for layer in group['layers']]\n                if any('garage' in layer for layer in layer_names):\n                    wall_type = 'garage_adjacent'\n\n                # Generate coordinates for wall tracing\n                coordinates = self._generate_wall_trace_coordinates(group)\n\n                classified_walls.append({\n                    'type': wall_type,\n                    'coordinates': coordinates,\n                    'total_length': group['total_length'],\n                    'layer_suggestions': list(group['layers']),\n                    'bounds': group_bounds,\n                    'segment_count': len(group['segments'])\n                })\n\n            print(f\"Classified {len(classified_walls)} wall groups\")\n            return classified_walls\n\n        except Exception as e:\n            print(f\"Error classifying wall types: {e}\")\n            return classified_walls\n\n    def _generate_wall_trace_coordinates(self, wall_group: Dict) -> List[Tuple[float, float]]:\n        \"\"\"\n        Generate coordinate sequence for tracing a wall group\n        \"\"\"\n        segments = wall_group['segments']\n        if not segments:\n            return []\n\n        # For simple cases, just return the endpoints of all segments\n        # In a more sophisticated implementation, this would create optimized trace paths\n        coordinates = []\n        \n        for segment in segments:\n            coordinates.extend([segment['start'], segment['end']])\n\n        # Remove duplicate consecutive points\n        unique_coords = []\n        for coord in coordinates:\n            if not unique_coords or coord != unique_coords[-1]:\n                unique_coords.append(coord)\n\n        return unique_coords\n\n    def analyze_dxf_geometry(self, analyzer=None) -> Dict:\n        \"\"\"\n        Main method to analyze DXF geometry using enhanced processing\n        \"\"\"\n        print(\"Starting enhanced DXF geometric analysis...\")\n        \n        # Use the enhanced geometry processor for comprehensive analysis\n        try:\n            analysis_result = self.enhanced_processor.process_dxf_geometry(self, analyzer)\n            print(\"Enhanced geometric analysis completed successfully\")\n            return analysis_result\n        except Exception as e:\n            print(f\"Enhanced analysis failed: {e}. Falling back to basic analysis.\")\n            return self._fallback_to_basic_analysis(analyzer)\n    \n    def _fallback_to_basic_analysis(self, analyzer=None) -> Dict:\n        \"\"\"\n        Fallback to the original analysis method if enhanced processing fails\n        \"\"\"\n        print(\"Using fallback analysis method...\")\n        \n        # Step 1: Extract all geometric entities\n        entities = self.extract_geometric_entities()\n        if not entities:\n            print(\"No geometric entities found\")\n            return self._create_fallback_analysis()\n\n        # Step 2: Analyze spatial relationships\n        spatial_analysis = self.analyze_spatial_relationships(entities)\n        \n        # Step 3: Use AI to enhance analysis if analyzer is provided and API key is available\n        if analyzer:\n            print(\"Checking AI analysis availability...\")\n            try:\n                # Check if OpenAI API key is available\n                import os\n                if os.environ.get(\"OPENAI_API_KEY\"):\n                    print(\"Integrating AI analysis with geometric data...\")\n                    # Prepare metadata for AI analysis\n                    analysis_metadata = {\n                        'entities_extracted': {\n                            'lines': len(entities.get('lines', [])),\n                            'polylines': len(entities.get('lwpolylines', [])) + len(entities.get('polylines', [])),\n                            'arcs': len(entities.get('arcs', [])),\n                            'circles': len(entities.get('circles', []))\n                        },\n                        'wall_groups_found': len(spatial_analysis.get('wall_groups', [])),\n                        'building_bounds': spatial_analysis.get('building_bounds')\n                    }\n                    \n                    # Use AI to enhance the spatial analysis with improved timeout handling  \n                    try:\n                        enhanced_analysis = analyzer.analyze_geometric_data(analysis_metadata, spatial_analysis)\n                        spatial_analysis = enhanced_analysis\n                        print(\"‚úÖ AI analysis integration completed successfully\")\n                    except Exception as e:\n                        if \"timeout\" in str(e).lower() or \"timed out\" in str(e).lower():\n                            print(\"‚ö†Ô∏è AI enhancement failed: Request timed out. Continuing with geometric analysis.\")\n                        else:\n                            print(f\"‚ö†Ô∏è AI enhancement failed: {e}. Continuing with geometric analysis.\")\n                        # Continue with geometric-only analysis - this is expected fallback behavior\n                else:\n                    print(\"OpenAI API key not configured. Proceeding with geometric-only analysis.\")\n                \n            except Exception as e:\n                print(f\"AI analysis failed: {str(e)}. Proceeding with geometric-only analysis.\")\n                # Continue with geometric analysis instead of failing completely\n        \n        # Step 4: Classify wall types (potentially enhanced by AI)\n        classified_walls = self.classify_wall_types_enhanced(spatial_analysis)\n        \n        # Step 5: Format result in the expected structure\n        result = {\n            'drawing_type': 'floor_plan',\n            'spaces': [],\n            'elements': [],\n            'analysis_metadata': {\n                'entities_extracted': {\n                    'lines': len(entities.get('lines', [])),\n                    'polylines': len(entities.get('lwpolylines', [])) + len(entities.get('polylines', [])),\n                    'arcs': len(entities.get('arcs', [])),\n                    'circles': len(entities.get('circles', []))\n                },\n                'wall_groups_found': len(classified_walls),\n                'building_bounds': spatial_analysis.get('building_bounds'),\n                'ai_enhanced': analyzer is not None,\n                'ai_insights': spatial_analysis.get('ai_insights', {}),\n                'ai_recommendations': spatial_analysis.get('ai_recommendations', [])\n            }\n        }\n\n        # Group walls by type and create continuous boundary traces (as requested by user)\n        boundary_groups = self._create_boundary_traces(classified_walls)\n        \n        # Convert boundary traces to spaces for drawing\n        for boundary_type, boundary_data in boundary_groups.items():\n            if boundary_data['coordinates']:\n                result['spaces'].append({\n                    'type': boundary_type,\n                    'coordinates': boundary_data['coordinates'],\n                    'layer_name': boundary_data['layer_name'],\n                    'metadata': {\n                        'total_length': boundary_data['total_length'],\n                        'wall_groups_merged': boundary_data['groups_merged'],\n                        'bounds': boundary_data['bounds'],\n                        'is_continuous_boundary': True\n                    }\n                })\n\n        print(f\"Analysis complete: found {len(result['spaces'])} wall spaces\")\n        return result\n\n    def classify_wall_types_enhanced(self, analysis: Dict) -> List[Dict]:\n        \"\"\"\n        Enhanced wall classification that uses AI insights when available\n        \"\"\"\n        classified_walls = []\n        \n        if not analysis.get('wall_groups') or not analysis.get('building_bounds'):\n            return classified_walls\n\n        building_bounds = analysis['building_bounds']\n        perimeter_tolerance = 5.0\n        ai_insights = analysis.get('ai_insights', {})\n        wall_classifications = ai_insights.get('wall_classifications', [])\n\n        try:\n            for i, group in enumerate(analysis['wall_groups']):\n                group_bounds = group['bounds']\n                \n                # Enhanced wall classification logic\n                wall_type = self._classify_wall_type_enhanced(group, building_bounds, perimeter_tolerance)\n\n                # Override with AI classification if available and confident\n                ai_classification = None\n                for classification in wall_classifications:\n                    if classification.get('group_index') == i:\n                        ai_classification = classification\n                        break\n                \n                if ai_classification and ai_classification.get('confidence', 0) > 0.7:\n                    wall_type = ai_classification.get('type', wall_type)\n                    print(f\"AI override: Wall group {i} classified as {wall_type} \"\n                          f\"(confidence: {ai_classification.get('confidence', 0):.2f})\")\n\n                # Generate coordinates for wall tracing\n                coordinates = self._generate_wall_trace_coordinates(group)\n\n                wall_data = {\n                    'type': wall_type,\n                    'coordinates': coordinates,\n                    'total_length': group['total_length'],\n                    'layer_suggestions': list(group['layers']),\n                    'bounds': group_bounds,\n                    'segment_count': len(group['segments'])\n                }\n                \n                # Add AI classification data if available\n                if ai_classification:\n                    wall_data['ai_classification'] = ai_classification\n\n                classified_walls.append(wall_data)\n\n            print(f\"Enhanced classification complete: {len(classified_walls)} wall groups\")\n            return classified_walls\n\n        except Exception as e:\n            print(f\"Error in enhanced wall classification: {e}\")\n            # Fall back to basic classification\n            return self.classify_wall_types(analysis)\n\n    def _create_boundary_traces(self, classified_walls: List[Dict]) -> Dict:\n        \"\"\"\n        Create clean, organized architectural element traces\n        Instead of merging all walls into chaotic overlapping lines, create proper organized layers\n        \"\"\"\n        print(f\"Creating organized architectural traces from {len(classified_walls)} wall groups...\")\n        \n        # Identify building perimeter (exterior boundary)\n        exterior_perimeter = self._find_building_perimeter(classified_walls)\n        \n        # Identify room boundaries and interior features\n        room_boundaries = self._find_room_boundaries(classified_walls)\n        \n        # Detect architectural features (doors, windows, etc.)\n        architectural_features = self._detect_architectural_features(classified_walls)\n        \n        # Detect floor type for proper layer naming\n        floor_type = self._detect_floor_type(classified_walls, exterior_perimeter)\n        \n        # Validate and fix geometric issues\n        if exterior_perimeter:\n            exterior_perimeter = self._validate_and_fix_boundary(exterior_perimeter, 'exterior')\n        \n        validated_rooms = []\n        for room in room_boundaries:\n            validated_room = self._validate_and_fix_boundary(room, 'interior')\n            if validated_room:  # Only include valid rooms\n                validated_rooms.append(validated_room)\n        room_boundaries = validated_rooms\n        \n        # Create organized layer structure\n        boundary_groups = {}\n        \n        # Add exterior perimeter if found\n        if exterior_perimeter:\n            boundary_groups['exterior'] = {\n                'coordinates': exterior_perimeter['coordinates'],\n                'layer_name': f'{floor_type}_exterior_perimeter',\n                'total_length': exterior_perimeter['total_length'],\n                'groups_merged': exterior_perimeter['groups_merged'],\n                'bounds': exterior_perimeter['bounds']\n            }\n            print(f\"Building exterior perimeter: {len(exterior_perimeter['coordinates'])} points, \"\n                  f\"length {exterior_perimeter['total_length']:.1f}\")\n        \n        # Add room boundaries (limit to avoid chaos)\n        max_rooms_to_show = 5  # Limit room boundaries to keep output clean\n        for i, room in enumerate(room_boundaries[:max_rooms_to_show]):\n            room_layer_name = f'{floor_type}_room_boundary_{i+1}'\n            boundary_groups[f'room_{i+1}'] = {\n                'coordinates': room['coordinates'],\n                'layer_name': room_layer_name,\n                'total_length': room['total_length'],\n                'groups_merged': room['groups_merged'],\n                'bounds': room['bounds']\n            }\n            print(f\"Room boundary {i+1}: {len(room['coordinates'])} points, \"\n                  f\"length {room['total_length']:.1f}\")\n        \n        # Add architectural features with unique identifiers\n        feature_count = 0\n        for feature_type, features in architectural_features.items():\n            for i, feature in enumerate(features[:3]):  # Limit features to avoid clutter\n                feature_count += 1\n                unique_id = f\"{feature_type}_{i+1}_{hash(str(feature['coordinates']))%1000:03d}\"\n                boundary_groups[unique_id] = {\n                    'coordinates': feature['coordinates'],\n                    'layer_name': f\"{floor_type}_{feature_type}_{i+1}\",\n                    'total_length': 0,  # Features don't have length\n                    'groups_merged': 1,\n                    'bounds': feature['bounds'],\n                    'feature_type': feature_type,\n                    'unique_id': unique_id,\n                    'dimensions': feature['dimensions']\n                }\n                print(f\"Detected {feature_type} {i+1}: {feature['dimensions']} (ID: {unique_id})\")\n        \n        print(f\"Created {len(boundary_groups)} organized architectural layers ({feature_count} features detected)\")\n        return boundary_groups\n    \n    def _find_building_perimeter(self, classified_walls: List[Dict]) -> Optional[Dict]:\n        \"\"\"Find the main building exterior perimeter\"\"\"\n        # Look for walls classified as exterior or at building boundaries\n        perimeter_walls = [wall for wall in classified_walls if wall['type'] == 'exterior']\n        \n        if not perimeter_walls:\n            return None\n        \n        # For now, take the largest exterior wall group as the main perimeter\n        main_perimeter = max(perimeter_walls, key=lambda w: w['total_length'])\n        \n        return {\n            'coordinates': main_perimeter['coordinates'],\n            'total_length': main_perimeter['total_length'],\n            'groups_merged': 1,\n            'bounds': main_perimeter['bounds']\n        }\n    \n    def _find_room_boundaries(self, classified_walls: List[Dict]) -> List[Dict]:\n        \"\"\"Identify individual room boundaries from interior walls\"\"\"\n        # Group interior walls by spatial proximity to identify room boundaries\n        interior_walls = [wall for wall in classified_walls if wall['type'] == 'interior']\n        \n        if not interior_walls:\n            return []\n        \n        # For now, limit to a reasonable number of room boundaries to avoid chaos\n        max_rooms = 10\n        room_boundaries = []\n        \n        # Sort walls by total length (longer walls likely form main room boundaries)\n        sorted_walls = sorted(interior_walls, key=lambda w: w['total_length'], reverse=True)\n        \n        for i, wall in enumerate(sorted_walls[:max_rooms]):\n            # Skip walls that are too small (likely fixtures or details)\n            if wall['total_length'] < 50:  # Minimum wall length threshold\n                continue\n                \n            room_boundaries.append({\n                'coordinates': wall['coordinates'],\n                'total_length': wall['total_length'],\n                'groups_merged': 1,\n                'bounds': wall['bounds']\n            })\n        \n        return room_boundaries\n\n    def _classify_wall_type_enhanced(self, group: Dict, building_bounds: Dict, perimeter_tolerance: float) -> str:\n        \"\"\"\n        Enhanced wall classification with better logic for architectural elements\n        \"\"\"\n        group_bounds = group['bounds']\n        segments = group['segments']\n        \n        # Check if this wall group is on the building perimeter\n        is_perimeter = (\n            abs(group_bounds['min_x'] - building_bounds['min_x']) <= perimeter_tolerance or\n            abs(group_bounds['max_x'] - building_bounds['max_x']) <= perimeter_tolerance or\n            abs(group_bounds['min_y'] - building_bounds['min_y']) <= perimeter_tolerance or\n            abs(group_bounds['max_y'] - building_bounds['max_y']) <= perimeter_tolerance\n        )\n        \n        # Check for garage walls based on layer names\n        layer_names = [layer.lower() for layer in group['layers']]\n        has_garage_indicator = any('garage' in layer for layer in layer_names)\n        \n        # Analyze wall characteristics\n        total_length = group['total_length']\n        segment_count = len(segments)\n        \n        # Classification logic\n        if is_perimeter and total_length > 100:  # Long perimeter walls are likely exterior\n            return 'exterior'\n        elif has_garage_indicator:\n            return 'garage_adjacent'\n        elif total_length > 200:  # Very long walls are likely main structural walls\n            return 'exterior' if is_perimeter else 'interior'\n        elif segment_count == 1 and total_length < 50:  # Short single segments might be doors/windows\n            return 'feature'  # Will be processed separately for door/window detection\n        else:\n            return 'interior'\n\n    def _detect_architectural_features(self, classified_walls: List[Dict]) -> Dict:\n        \"\"\"\n        Detect doors, windows, and other architectural features\n        \"\"\"\n        features = {\n            'doors': [],\n            'windows': [],\n            'openings': []\n        }\n        \n        # Look for feature-type walls (short segments that might be doors/windows)\n        feature_walls = [wall for wall in classified_walls if wall['type'] == 'feature']\n        \n        for feature in feature_walls:\n            # Analyze feature characteristics to classify as door or window\n            total_length = feature['total_length']\n            bounds = feature['bounds']\n            width = bounds['max_x'] - bounds['min_x']\n            height = bounds['max_y'] - bounds['min_y']\n            \n            if total_length < 20:  # Very small features might be windows\n                features['windows'].append({\n                    'coordinates': feature['coordinates'],\n                    'bounds': bounds,\n                    'layer_name': 'windows',\n                    'dimensions': {'width': width, 'height': height}\n                })\n            elif total_length < 50:  # Medium features might be doors\n                features['doors'].append({\n                    'coordinates': feature['coordinates'],\n                    'bounds': bounds,\n                    'layer_name': 'doors',\n                    'dimensions': {'width': width, 'height': height}\n                })\n            else:  # Larger features are general openings\n                features['openings'].append({\n                    'coordinates': feature['coordinates'],\n                    'bounds': bounds,\n                    'layer_name': 'openings',\n                    'dimensions': {'width': width, 'height': height}\n                })\n        \n        return features\n\n    def _detect_floor_type(self, classified_walls: List[Dict], exterior_perimeter: Optional[Dict]) -> str:\n        \"\"\"\n        Detect floor type (basement, main_floor, second_floor) based on architectural cues\n        \"\"\"\n        # Analyze wall characteristics and spatial patterns\n        if not classified_walls:\n            return 'main_floor'  # Default\n        \n        # Count different wall types\n        exterior_count = len([w for w in classified_walls if w['type'] == 'exterior'])\n        interior_count = len([w for w in classified_walls if w['type'] == 'interior'])\n        garage_count = len([w for w in classified_walls if w['type'] == 'garage_adjacent'])\n        \n        # Analyze building dimensions if exterior perimeter exists\n        if exterior_perimeter:\n            bounds = exterior_perimeter['bounds']\n            building_area = (bounds['max_x'] - bounds['min_x']) * (bounds['max_y'] - bounds['min_y'])\n            \n            # Very large buildings might indicate main floor\n            if building_area > 500000:  # Large building\n                return 'main_floor'\n        \n        # Analyze layer names for clues\n        all_layer_names = []\n        for wall in classified_walls:\n            all_layer_names.extend(wall.get('layer_suggestions', []))\n        \n        layer_text = ' '.join(all_layer_names).lower()\n        \n        # Look for basement indicators\n        if any(keyword in layer_text for keyword in ['basement', 'foundation', 'lower', 'cellar']):\n            return 'basement'\n        \n        # Look for second floor indicators  \n        if any(keyword in layer_text for keyword in ['second', 'upper', '2nd', 'floor_2']):\n            return 'second_floor'\n            \n        # Look for garage indicators (often main floor)\n        if garage_count > 0 or 'garage' in layer_text:\n            return 'main_floor'\n        \n        # Default classification based on wall patterns\n        if interior_count > exterior_count * 3:  # Many interior walls suggest main living floor\n            return 'main_floor'\n        elif exterior_count > interior_count:  # More exterior walls might suggest basement (foundation)\n            return 'basement'\n        else:\n            return 'main_floor'  # Default\n\n    def _validate_and_fix_boundary(self, boundary: Dict, boundary_type: str) -> Optional[Dict]:\n        \"\"\"\n        Validate and fix geometric issues in boundaries\n        Ensures boundaries are closed, non-self-intersecting loops suitable for professional CAD workflows\n        \"\"\"\n        if not boundary or 'coordinates' not in boundary:\n            print(f\"Rejected: {boundary_type} boundary missing coordinates\")\n            return None\n            \n        coords = boundary['coordinates']\n        \n        # STRICT: Reject boundaries with insufficient points\n        if len(coords) < 3:\n            print(f\"Rejected: {boundary_type} boundary has insufficient points ({len(coords)}) - minimum 3 required\")\n            return None\n        \n        validated_coords = []\n        \n        # Remove duplicate consecutive points with stricter tolerance\n        for i, coord in enumerate(coords):\n            if i == 0 or self._distance_between_points(coord, coords[i-1]) > 0.5:  # Stricter tolerance\n                validated_coords.append(coord)\n        \n        # STRICT: After deduplication, must still have at least 3 points\n        if len(validated_coords) < 3:\n            print(f\"Rejected: {boundary_type} boundary has insufficient unique points after deduplication ({len(validated_coords)})\")\n            return None\n        \n        # Ensure boundary is closed\n        first_point = validated_coords[0]\n        last_point = validated_coords[-1]\n        \n        if self._distance_between_points(first_point, last_point) > 1.0:  # Not closed\n            validated_coords.append(first_point)  # Close the boundary\n            print(f\"Fixed: Closed {boundary_type} boundary by connecting endpoints\")\n        \n        # STRICT: Check and reject self-intersections\n        if self._has_obvious_self_intersection(validated_coords):\n            print(f\"Rejected: {boundary_type} boundary has self-intersections - cannot be used for professional CAD workflows\")\n            return None\n        \n        # STRICT: Final validation - ensure we have a valid polygon\n        if len(validated_coords) < 4:  # Need at least 3 unique points + closure\n            print(f\"Rejected: {boundary_type} boundary insufficient for closed polygon ({len(validated_coords)} points)\")\n            return None\n        \n        # Calculate area to ensure polygon is valid\n        area = self._calculate_polygon_area(validated_coords)\n        if abs(area) < 10.0:  # Very small area might indicate degenerate polygon\n            print(f\"Rejected: {boundary_type} boundary has very small area ({area:.2f}) - likely degenerate\")\n            return None\n        \n        # Update boundary with validated coordinates\n        validated_boundary = boundary.copy()\n        validated_boundary['coordinates'] = validated_coords\n        validated_boundary['is_closed'] = True\n        validated_boundary['validation_status'] = 'validated'\n        validated_boundary['polygon_area'] = abs(area)\n        \n        # Recalculate bounds with validated coordinates\n        x_coords = [coord[0] for coord in validated_coords]\n        y_coords = [coord[1] for coord in validated_coords]\n        validated_boundary['bounds'] = {\n            'min_x': min(x_coords), 'max_x': max(x_coords),\n            'min_y': min(y_coords), 'max_y': max(y_coords)\n        }\n        \n        print(f\"Validated: {boundary_type} boundary - {len(validated_coords)} points, area {abs(area):.1f}\")\n        return validated_boundary\n    \n    def _calculate_polygon_area(self, coords: List[Tuple[float, float]]) -> float:\n        \"\"\"Calculate polygon area using shoelace formula\"\"\"\n        if len(coords) < 3:\n            return 0.0\n        \n        area = 0.0\n        n = len(coords)\n        for i in range(n):\n            j = (i + 1) % n\n            area += coords[i][0] * coords[j][1]\n            area -= coords[j][0] * coords[i][1]\n        return area / 2.0\n    \n    def _distance_between_points(self, p1: Tuple[float, float], p2: Tuple[float, float]) -> float:\n        \"\"\"Calculate Euclidean distance between two points\"\"\"\n        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n    \n    def _has_obvious_self_intersection(self, coords: List[Tuple[float, float]]) -> bool:\n        \"\"\"Simple check for obvious self-intersections\"\"\"\n        # This is a basic check - in production, use more sophisticated algorithms\n        if len(coords) < 4:\n            return False\n        \n        # Check if any non-adjacent line segments intersect\n        for i in range(len(coords) - 1):\n            for j in range(i + 2, len(coords) - 1):\n                if j == len(coords) - 2 and i == 0:  # Skip checking first and last segments (they should meet)\n                    continue\n                if self._line_segments_intersect(coords[i], coords[i+1], coords[j], coords[j+1]):\n                    return True\n        return False\n    \n    def _line_segments_intersect(self, p1, p2, p3, p4) -> bool:\n        \"\"\"Check if two line segments intersect\"\"\"\n        # Using cross product method\n        def ccw(A, B, C):\n            return (C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0])\n        \n        return ccw(p1, p3, p4) != ccw(p2, p3, p4) and ccw(p1, p2, p3) != ccw(p1, p2, p4)\n\n    def _generate_layer_name_enhanced(self, wall: Dict, index: int) -> str:\n        \"\"\"Generate layer name using AI suggestions when available (legacy method - now replaced by boundary tracing)\"\"\"\n        \n        # Check if AI suggested a layer name\n        ai_classification = wall.get('ai_classification', {})\n        suggested_layer = ai_classification.get('suggested_layer', '')\n        \n        if suggested_layer and suggested_layer.strip():\n            print(f\"Using AI suggested layer name: {suggested_layer}\")\n            return suggested_layer\n        \n        # Fall back to standard naming\n        wall_type = wall['type']\n        layer_map = {\n            'exterior': f'main_floor_exterior_wall_{index}',\n            'interior': f'main_floor_interior_wall_{index}',\n            'garage_adjacent': f'main_floor_garage_wall_{index}'\n        }\n        return layer_map.get(wall_type, f'main_floor_{wall_type}_wall_{index}')\n\n    def _generate_layer_name(self, wall_type: str, index: int) -> str:\n        \"\"\"Generate appropriate layer name based on wall type (legacy method)\"\"\"\n        layer_map = {\n            'exterior': f'main_floor_exterior_wall_{index}',\n            'interior': f'main_floor_interior_wall_{index}',\n            'garage_adjacent': f'main_floor_garage_wall_{index}'\n        }\n        return layer_map.get(wall_type, f'main_floor_{wall_type}_wall_{index}')\n\n    def _create_fallback_analysis(self) -> Dict:\n        \"\"\"Create a basic fallback analysis if no geometry is found\"\"\"\n        print(\"Creating fallback analysis with minimal structure\")\n        return {\n            'drawing_type': 'floor_plan',\n            'spaces': [{\n                'type': 'exterior',\n                'coordinates': [(0, 0), (100, 0), (100, 100), (0, 100), (0, 0)],\n                'layer_name': 'main_floor_exterior_wall_fallback',\n                'metadata': {\n                    'fallback': True,\n                    'message': 'No geometry detected - using minimal fallback'\n                }\n            }],\n            'elements': [],\n            'analysis_metadata': {\n                'fallback_used': True\n            }\n        }\n\ndef convert_pdf_to_image(pdf_path: str, output_path: Optional[str] = None) -> str:\n    \"\"\"\n    Convert PDF to image for AI analysis\n    Note: This is a simplified version. For production, you'd use pdf2image library\n    \"\"\"\n    if output_path is None:\n        output_path = pdf_path.replace('.pdf', '.png')\n    \n    print(f\"PDF to image conversion would happen here: {pdf_path} -> {output_path}\")\n    print(\"Note: For full implementation, install pdf2image library\")\n    \n    return output_path\n\ndef main():\n    \"\"\"\n    Demonstration of AutoCAD integration capabilities\n    \"\"\"\n    print(\"AutoCAD Integration Module\")\n    print(\"=========================\")\n    \n    # Create integration instance\n    autocad = AutoCADIntegration()\n    \n    # Create a new DXF document\n    autocad.create_new_dxf()\n    \n    # Create sample layers\n    print(\"\\nCreating sample layers...\")\n    autocad.create_layer(\"basement_interior_wall\", color=1)  # Red\n    autocad.create_layer(\"basement_exterior_wall\", color=2)  # Yellow\n    autocad.create_layer(\"main_floor_garage_wall\", color=3)  # Green\n    \n    # Draw sample elements\n    print(\"\\nDrawing sample elements...\")\n    \n    # Sample interior wall\n    interior_coords = [(0, 0), (100, 0), (100, 50), (0, 50), (0, 0)]\n    autocad.draw_polyline(interior_coords, \"basement_interior_wall\")\n    \n    # Sample exterior wall\n    exterior_coords = [(0, 0), (150, 0), (150, 80), (0, 80), (0, 0)]\n    autocad.draw_polyline(exterior_coords, \"basement_exterior_wall\")\n    \n    # Sample door\n    autocad.draw_rectangle((50, 0), (80, 10), \"basement_interior_wall\")\n    \n    # List all layers\n    print(\"\\nLayers in document:\")\n    layers = autocad.list_layers()\n    for layer in layers:\n        print(f\"  - {layer['name']} (Color: {layer['color']})\")\n    \n    # Save the file\n    output_file = \"sample_architectural_output.dxf\"\n    autocad.save_dxf(output_file)\n    \n    print(f\"\\nSample DXF file created: {output_file}\")\n    print(\"AutoCAD integration test completed successfully!\")\n\nif __name__ == \"__main__\":\n    main()","size_bytes":69805},"src/enhanced_geometry_processor.py":{"content":"import math\nimport json\nfrom typing import Dict, List, Tuple, Optional, Any, TYPE_CHECKING\nfrom collections import defaultdict, Counter\nimport ezdxf\n\nif TYPE_CHECKING:\n    from .autocad_integration import AutoCADIntegration\n\nclass EnhancedGeometryProcessor:\n    \"\"\"\n    Comprehensive DXF geometry processor that provides:\n    1. House outline detection and tracing\n    2. Standardized layer naming matching client specifications\n    3. Element detection (doors, windows, garages)\n    4. Measurement extraction and export\n    5. Interior/exterior wall classification\n    \"\"\"\n    \n    def __init__(self):\n        # Client-specified layer naming convention\n        self.layer_naming = {\n            'walls': {\n                'basement': {\n                    'interior': 'basement interior line',\n                    'exterior': 'basement exterior line'\n                },\n                'main_floor': {\n                    'interior': 'main floor interior line',\n                    'exterior': 'main floor exterior line',\n                    'garage': 'main floor garage line'\n                },\n                'second_floor': {\n                    'interior': 'second floor interior line',\n                    'exterior': 'second floor exterior line'\n                }\n            },\n            'elements': {\n                'doors': {\n                    'front': 'front door main',\n                    'back': 'back door main', \n                    'patio': 'patio door main',\n                    'garage': 'garage door main',\n                    'interior': 'interior door main'\n                },\n                'windows': {\n                    'front': 'front window main',\n                    'back': 'back window main',\n                    'side': 'side window main',\n                    'door': 'door window main'\n                }\n            }\n        }\n        \n        # Color scheme matching user's manual highlighting:\n        # - Outer boundaries (exterior/perimeter): Yellow/Lime for clear visibility\n        # - Inner boundaries (interior walls): Magenta/Pink for contrast\n        self.layer_colors = {\n            'basement interior line': 6,  # Magenta (inner boundaries)\n            'basement exterior line': 2,  # Yellow (outer boundary)\n            'main floor interior line': 6,  # Magenta (inner boundaries)\n            'main floor exterior line': 2,  # Yellow (outer boundary)\n            'main floor garage line': 4,  # Cyan\n            'second floor interior line': 6,  # Magenta (inner boundaries)\n            'second floor exterior line': 2,  # Yellow (outer boundary)\n            'front door main': 3,  # Green\n            'back door main': 3,  # Green\n            'patio door main': 3,  # Green\n            'garage door main': 3,  # Green\n            'interior door main': 3,  # Green\n            'front window main': 5,  # Blue\n            'back window main': 5,  # Blue\n            'side window main': 5,  # Blue\n            'door window main': 5,  # Blue\n        }\n    \n    def process_dxf_geometry(self, autocad_integration: 'AutoCADIntegration', ai_analyzer=None) -> Dict:\n        \"\"\"\n        Main processing method that performs comprehensive DXF analysis\n        \"\"\"\n        print(\"Starting enhanced DXF geometry processing...\")\n        \n        # Step 1: Extract all geometric entities\n        entities = autocad_integration.extract_geometric_entities()\n        if not entities:\n            return self._create_enhanced_fallback()\n        \n        # Step 2: Detect house outline and structure\n        house_structure = self._detect_house_outline(entities)\n        \n        # Step 3: Classify wall segments (interior vs exterior)\n        wall_classification = self._classify_walls_advanced(house_structure, entities)\n        \n        # Step 4: Detect architectural elements (doors, windows, garages)\n        elements_detected = self._detect_architectural_elements(entities, house_structure)\n        \n        # Step 5: Extract measurements and dimensions\n        measurements = self._extract_measurements(entities, elements_detected, wall_classification)\n        \n        # Step 6: Enhance with AI analysis if available\n        if ai_analyzer:\n            house_structure, wall_classification, elements_detected = self._enhance_with_ai(\n                ai_analyzer, house_structure, wall_classification, elements_detected, entities\n            )\n        \n        # Step 7: Generate standardized layers and drawing commands\n        drawing_commands = self._generate_drawing_commands(\n            house_structure, wall_classification, elements_detected\n        )\n        \n        # Step 8: Prepare results in expected format\n        return self._format_results(\n            house_structure, wall_classification, elements_detected, \n            measurements, drawing_commands\n        )\n    \n    def _detect_house_outline(self, entities: Dict[str, List]) -> Dict:\n        \"\"\"\n        Detect the main house outline and structure from DXF geometry\n        \"\"\"\n        print(\"Detecting house outline and structure...\")\n        \n        # Combine all linear entities\n        all_segments = []\n        \n        # Process lines\n        for line in entities.get('lines', []):\n            all_segments.append({\n                'start': line['start'],\n                'end': line['end'],\n                'length': line['length'],\n                'layer': line['layer'],\n                'type': 'line'\n            })\n        \n        # Process polylines and lwpolylines\n        for polyline in entities.get('lwpolylines', []) + entities.get('polylines', []):\n            points = polyline['points']\n            if len(points) >= 2:\n                for i in range(len(points) - 1):\n                    start, end = points[i], points[i + 1]\n                    length = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)\n                    all_segments.append({\n                        'start': start,\n                        'end': end,\n                        'length': length,\n                        'layer': polyline['layer'],\n                        'type': 'polyline_segment',\n                        'parent_closed': polyline.get('closed', False)\n                    })\n        \n        # Find building bounds using percentile-based trimming to exclude outliers (dimensions/annotations)\n        all_points = []\n        for segment in all_segments:\n            all_points.extend([segment['start'], segment['end']])\n        \n        if not all_points:\n            return {'outline_detected': False, 'segments': [], 'bounds': None}\n        \n        # Use 2% trimming on each side to exclude dimension/annotation outliers\n        x_coords = sorted([p[0] for p in all_points])\n        y_coords = sorted([p[1] for p in all_points])\n        trim_percent = 0.02  # Trim 2% from each end\n        trim_count = max(1, int(len(x_coords) * trim_percent))\n        \n        bounds = {\n            'min_x': x_coords[trim_count],\n            'max_x': x_coords[-trim_count-1],\n            'min_y': y_coords[trim_count],\n            'max_y': y_coords[-trim_count-1]\n        }\n        bounds['width'] = bounds['max_x'] - bounds['min_x']\n        bounds['height'] = bounds['max_y'] - bounds['min_y']\n        \n        print(f\"Building bounds (2% trimmed): {bounds['width']:.1f} x {bounds['height']:.1f} units\")\n        \n        # Detect main outline (exterior perimeter)\n        perimeter_segments = self._find_perimeter_segments(all_segments, bounds)\n        \n        # Group connected segments into continuous walls\n        wall_groups = self._group_connected_segments(all_segments, bounds)\n        \n        return {\n            'outline_detected': True,\n            'segments': all_segments,\n            'perimeter_segments': perimeter_segments,\n            'wall_groups': wall_groups,\n            'bounds': bounds,\n            'total_segments': len(all_segments)\n        }\n    \n    def _find_perimeter_segments(self, segments: List[Dict], bounds: Dict) -> List[Dict]:\n        \"\"\"\n        Identify segments that form the building perimeter (exterior walls).\n        Uses adaptive tolerance based on building size and allows segments with any point near perimeter.\n        \"\"\"\n        # Use 1% of the smaller dimension as tolerance (adaptive to drawing scale)\n        building_size = min(bounds['width'], bounds['height'])\n        perimeter_tolerance = max(building_size * 0.01, 8.0)  # At least 8 units for better detection\n        \n        perimeter_segments = []\n        \n        for segment in segments:\n            start_x, start_y = segment['start']\n            end_x, end_y = segment['end']\n            \n            # Calculate midpoint for additional detection\n            mid_x = (start_x + end_x) / 2\n            mid_y = (start_y + end_y) / 2\n            \n            # Check if ANY point (start, end, or midpoint) is near the building perimeter\n            # This catches diagonal walls and corner segments more effectively\n            on_perimeter = (\n                # Near left edge (any point)\n                (abs(start_x - bounds['min_x']) <= perimeter_tolerance or\n                 abs(end_x - bounds['min_x']) <= perimeter_tolerance or\n                 abs(mid_x - bounds['min_x']) <= perimeter_tolerance) or\n                # Near right edge (any point)\n                (abs(start_x - bounds['max_x']) <= perimeter_tolerance or\n                 abs(end_x - bounds['max_x']) <= perimeter_tolerance or\n                 abs(mid_x - bounds['max_x']) <= perimeter_tolerance) or\n                # Near bottom edge (any point)\n                (abs(start_y - bounds['min_y']) <= perimeter_tolerance or\n                 abs(end_y - bounds['min_y']) <= perimeter_tolerance or\n                 abs(mid_y - bounds['min_y']) <= perimeter_tolerance) or\n                # Near top edge (any point)\n                (abs(start_y - bounds['max_y']) <= perimeter_tolerance or\n                 abs(end_y - bounds['max_y']) <= perimeter_tolerance or\n                 abs(mid_y - bounds['max_y']) <= perimeter_tolerance)\n            )\n            \n            if on_perimeter:\n                perimeter_segments.append(segment)\n        \n        print(f\"Found {len(perimeter_segments)} perimeter segments out of {len(segments)} total (tolerance: {perimeter_tolerance:.1f} units)\")\n        return perimeter_segments\n    \n    def _group_connected_segments(self, segments: List[Dict], bounds: Dict) -> List[Dict]:\n        \"\"\"\n        Group segments that are connected to form continuous walls (optimized version).\n        Prioritizes longer segments for better wall detection.\n        Uses adaptive tolerance based on building size.\n        \"\"\"\n        # Adaptive tolerance: 1% of smaller dimension, minimum 8 units\n        building_size = min(bounds['width'], bounds['height'])\n        connection_tolerance = max(building_size * 0.01, 8.0)\n        groups = []\n        used_segments = set()\n        \n        # Sort segments by length (longest first) to prioritize main walls\n        sorted_segments = sorted(segments, key=lambda s: s.get('length', 0), reverse=True)\n        \n        # Limit processing for performance - balanced between coverage and speed\n        max_segments_to_process = min(len(sorted_segments), 1500)  # Balanced limit\n        segments_to_process = sorted_segments[:max_segments_to_process]\n        \n        print(f\"Processing {len(segments_to_process)} segments for grouping (prioritized by length from {len(segments)} total, connection tolerance: {connection_tolerance:.1f} units)\")\n        \n        for i, segment in enumerate(segments_to_process):\n            if i in used_segments:\n                continue\n            \n            # Start a new group\n            group = {\n                'segments': [segment],\n                'total_length': segment['length'],\n                'layers': {segment['layer']},\n                'bounds': self._calculate_segment_bounds([segment])\n            }\n            used_segments.add(i)\n            \n            # Find connected segments with iteration limit to prevent infinite loops\n            max_iterations = 50  # Prevent infinite loops\n            iteration_count = 0\n            changed = True\n            \n            while changed and iteration_count < max_iterations:\n                changed = False\n                iteration_count += 1\n                \n                for j, other_segment in enumerate(segments_to_process):\n                    if j in used_segments:\n                        continue\n                    \n                    # Check if this segment connects to any in the current group\n                    if self._segments_connected(group['segments'], other_segment, connection_tolerance):\n                        group['segments'].append(other_segment)\n                        group['total_length'] += other_segment['length']\n                        group['layers'].add(other_segment['layer'])\n                        group['bounds'] = self._calculate_segment_bounds(group['segments'])\n                        used_segments.add(j)\n                        changed = True\n                        break  # Process one connection per iteration to avoid excessive computation\n            \n            groups.append(group)\n        \n        print(f\"Grouped {len(segments_to_process)} segments into {len(groups)} wall groups\")\n        return groups\n    \n    def _segments_connected(self, group_segments: List[Dict], new_segment: Dict, tolerance: float) -> bool:\n        \"\"\"\n        Check if a new segment connects to any segment in the group\n        \"\"\"\n        new_start, new_end = new_segment['start'], new_segment['end']\n        \n        for segment in group_segments:\n            seg_start, seg_end = segment['start'], segment['end']\n            \n            # Check all possible connections\n            distances = [\n                self._distance(new_start, seg_start),\n                self._distance(new_start, seg_end),\n                self._distance(new_end, seg_start),\n                self._distance(new_end, seg_end)\n            ]\n            \n            if any(d <= tolerance for d in distances):\n                return True\n        \n        return False\n    \n    def _distance(self, p1: Tuple[float, float], p2: Tuple[float, float]) -> float:\n        \"\"\"Calculate distance between two points\"\"\"\n        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n    \n    def _calculate_segment_bounds(self, segments: List[Dict]) -> Dict:\n        \"\"\"Calculate bounding box for a list of segments\"\"\"\n        all_points = []\n        for segment in segments:\n            all_points.extend([segment['start'], segment['end']])\n        \n        return {\n            'min_x': min(p[0] for p in all_points),\n            'max_x': max(p[0] for p in all_points),\n            'min_y': min(p[1] for p in all_points),\n            'max_y': max(p[1] for p in all_points)\n        }\n    \n    def _classify_walls_advanced(self, house_structure: Dict, entities: Dict) -> Dict:\n        \"\"\"\n        Advanced wall classification to distinguish interior vs exterior walls\n        \"\"\"\n        print(\"Classifying walls (interior vs exterior)...\")\n        \n        if not house_structure['outline_detected']:\n            return {'classifications': [], 'perimeter_wall_groups': [], 'interior_wall_groups': []}\n        \n        perimeter_segments = set(id(seg) for seg in house_structure['perimeter_segments'])\n        wall_groups = house_structure['wall_groups']\n        bounds = house_structure['bounds']\n        \n        classifications = []\n        perimeter_groups = []\n        interior_groups = []\n        \n        for group in wall_groups:\n            # Determine if this wall group is primarily exterior or interior\n            # Use more forgiving criteria for architectural drawings\n            perimeter_segment_count = sum(\n                1 for seg in group['segments'] \n                if id(seg) in perimeter_segments\n            )\n            \n            # Exterior if: has ‚â•3 perimeter segments OR >30% are perimeter OR very long and touches perimeter\n            is_exterior = (\n                perimeter_segment_count >= 3 or  # At least 3 perimeter touches\n                (perimeter_segment_count > len(group['segments']) * 0.3) or  # >30% are perimeter\n                (perimeter_segment_count >= 1 and group['total_length'] > 200)  # Long wall touching perimeter\n            )\n            \n            # Determine floor type based on geometry analysis\n            floor_type = self._determine_floor_type(group, bounds, entities)\n            \n            # Determine if this might be a garage wall\n            is_garage = self._is_garage_wall(group, bounds, entities)\n            \n            # Create classification\n            if is_garage:\n                wall_type = 'garage'\n                layer_name = self.layer_naming['walls'][floor_type]['garage']\n            elif is_exterior:\n                wall_type = 'exterior'\n                layer_name = self.layer_naming['walls'][floor_type]['exterior']\n            else:\n                wall_type = 'interior'\n                layer_name = self.layer_naming['walls'][floor_type]['interior']\n            \n            classification = {\n                'group_index': len(classifications),\n                'wall_type': wall_type,\n                'floor_type': floor_type,\n                'layer_name': layer_name,\n                'color': self.layer_colors.get(layer_name, 7),\n                'segments': group['segments'],\n                'total_length': group['total_length'],\n                'bounds': group['bounds'],\n                'is_exterior': is_exterior,\n                'is_garage': is_garage,\n                'confidence': 0.9 if is_exterior else 0.8\n            }\n            \n            classifications.append(classification)\n            \n            if is_exterior:\n                perimeter_groups.append(classification)\n            else:\n                interior_groups.append(classification)\n        \n        print(f\"Classified {len(perimeter_groups)} exterior and {len(interior_groups)} interior wall groups\")\n        \n        return {\n            'classifications': classifications,\n            'perimeter_wall_groups': perimeter_groups,\n            'interior_wall_groups': interior_groups\n        }\n    \n    def _determine_floor_type(self, wall_group: Dict, bounds: Dict, entities: Dict) -> str:\n        \"\"\"\n        Determine floor type (basement, main_floor, second_floor) based on geometry\n        \"\"\"\n        # For now, default to main_floor\n        # In a more sophisticated implementation, this would analyze:\n        # - Z-coordinates if available\n        # - Layer names\n        # - Text annotations\n        # - Drawing structure\n        \n        # Check layer names for clues\n        layer_names = ' '.join(wall_group['layers']).lower()\n        \n        if 'basement' in layer_names or 'bsmt' in layer_names:\n            return 'basement'\n        elif 'second' in layer_names or '2nd' in layer_names or 'upper' in layer_names:\n            return 'second_floor'\n        else:\n            return 'main_floor'\n    \n    def _is_garage_wall(self, wall_group: Dict, bounds: Dict, entities: Dict) -> bool:\n        \"\"\"\n        Determine if this wall group is associated with a garage\n        \"\"\"\n        # Check layer names for garage indicators\n        layer_names = ' '.join(wall_group['layers']).lower()\n        garage_keywords = ['garage', 'gar', 'carport']\n        \n        return any(keyword in layer_names for keyword in garage_keywords)\n    \n    def _detect_architectural_elements(self, entities: Dict, house_structure: Dict) -> Dict:\n        \"\"\"\n        Detect doors, windows, and other architectural elements\n        \"\"\"\n        print(\"Detecting architectural elements (doors, windows, garages)...\")\n        \n        elements = {\n            'doors': [],\n            'windows': [],\n            'openings': []\n        }\n        \n        # Detect doors from blocks or specific geometry patterns\n        elements['doors'] = self._detect_doors(entities, house_structure)\n        \n        # Detect windows from blocks or geometry patterns\n        elements['windows'] = self._detect_windows(entities, house_structure)\n        \n        # Detect openings in walls (potential doors/windows)\n        elements['openings'] = self._detect_wall_openings(entities, house_structure)\n        \n        total_elements = len(elements['doors']) + len(elements['windows']) + len(elements['openings'])\n        print(f\"Detected {total_elements} architectural elements: \"\n              f\"{len(elements['doors'])} doors, {len(elements['windows'])} windows, \"\n              f\"{len(elements['openings'])} openings\")\n        \n        return elements\n    \n    def _detect_doors(self, entities: Dict, house_structure: Dict) -> List[Dict]:\n        \"\"\"\n        Detect door elements from DXF geometry\n        \"\"\"\n        doors = []\n        \n        # Look for door blocks first\n        for block in entities.get('blocks', []):\n            block_name = block.get('name', '').lower()\n            if any(keyword in block_name for keyword in ['door', 'dr']):\n                door = self._analyze_door_block(block)\n                if door:\n                    doors.append(door)\n        \n        # Look for door-like arc patterns (swing doors)\n        doors.extend(self._detect_door_arcs(entities, house_structure))\n        \n        # Look for rectangular openings that might be doors\n        doors.extend(self._detect_door_rectangles(entities, house_structure))\n        \n        return doors\n    \n    def _detect_windows(self, entities: Dict, house_structure: Dict) -> List[Dict]:\n        \"\"\"\n        Detect window elements from DXF geometry\n        \"\"\"\n        windows = []\n        \n        # Look for window blocks\n        for block in entities.get('blocks', []):\n            block_name = block.get('name', '').lower()\n            if any(keyword in block_name for keyword in ['window', 'win', 'wndw']):\n                window = self._analyze_window_block(block)\n                if window:\n                    windows.append(window)\n        \n        # Look for small rectangular patterns that might be windows\n        windows.extend(self._detect_window_rectangles(entities, house_structure))\n        \n        return windows\n    \n    def _detect_door_arcs(self, entities: Dict, house_structure: Dict) -> List[Dict]:\n        \"\"\"\n        Detect doors from arc patterns (door swing indicators)\n        \"\"\"\n        doors = []\n        \n        for arc in entities.get('arcs', []):\n            # Check if arc could represent a door swing\n            radius = arc['radius']\n            if 24 <= radius <= 48:  # Typical door swing radius (inches)\n                # Find nearby wall segments\n                nearby_walls = self._find_nearby_wall_segments(\n                    arc['center'], house_structure, radius + 6\n                )\n                \n                if nearby_walls:\n                    door = {\n                        'type': 'swing_door',\n                        'center': arc['center'],\n                        'radius': radius,\n                        'width': radius * 2,  # Approximate door width\n                        'layer_name': self._determine_door_layer_name(arc['center'], house_structure),\n                        'color': self.layer_colors.get(self._determine_door_layer_name(arc['center'], house_structure), 6),\n                        'confidence': 0.7,\n                        'source': 'arc_pattern'\n                    }\n                    doors.append(door)\n        \n        return doors\n    \n    def _detect_door_rectangles(self, entities: Dict, house_structure: Dict) -> List[Dict]:\n        \"\"\"\n        Detect doors from rectangular openings\n        \"\"\"\n        doors = []\n        \n        # Analyze closed polylines that might represent doors\n        for polyline in entities.get('lwpolylines', []):\n            if polyline.get('closed', False):\n                bounds = self._calculate_polyline_bounds(polyline['points'])\n                width = bounds['max_x'] - bounds['min_x']\n                height = bounds['max_y'] - bounds['min_y']\n                \n                # Check if dimensions match typical door sizes\n                if self._is_door_sized(width, height):\n                    door = {\n                        'type': 'rectangular_door',\n                        'bounds': bounds,\n                        'width': width,\n                        'height': height,\n                        'center': ((bounds['min_x'] + bounds['max_x'])/2, (bounds['min_y'] + bounds['max_y'])/2),\n                        'layer_name': self._determine_door_layer_name((bounds['min_x'] + bounds['max_x'])/2, house_structure),\n                        'color': self.layer_colors.get(self._determine_door_layer_name((bounds['min_x'] + bounds['max_x'])/2, house_structure), 6),\n                        'confidence': 0.6,\n                        'source': 'rectangle_pattern'\n                    }\n                    doors.append(door)\n        \n        return doors\n    \n    def _detect_window_rectangles(self, entities: Dict, house_structure: Dict) -> List[Dict]:\n        \"\"\"\n        Detect windows from rectangular patterns\n        \"\"\"\n        windows = []\n        \n        for polyline in entities.get('lwpolylines', []):\n            if polyline.get('closed', False):\n                bounds = self._calculate_polyline_bounds(polyline['points'])\n                width = bounds['max_x'] - bounds['min_x']\n                height = bounds['max_y'] - bounds['min_y']\n                \n                # Check if dimensions match typical window sizes\n                if self._is_window_sized(width, height):\n                    window = {\n                        'type': 'rectangular_window',\n                        'bounds': bounds,\n                        'width': width,\n                        'height': height,\n                        'center': ((bounds['min_x'] + bounds['max_x'])/2, (bounds['min_y'] + bounds['max_y'])/2),\n                        'layer_name': self._determine_window_layer_name((bounds['min_x'] + bounds['max_x'])/2, house_structure),\n                        'color': self.layer_colors.get(self._determine_window_layer_name((bounds['min_x'] + bounds['max_x'])/2, house_structure), 7),\n                        'confidence': 0.6,\n                        'source': 'rectangle_pattern'\n                    }\n                    windows.append(window)\n        \n        return windows\n    \n    def _is_door_sized(self, width: float, height: float) -> bool:\n        \"\"\"Check if dimensions match typical door sizes\"\"\"\n        # Standard door sizes (assuming inches)\n        door_sizes = [\n            (24, 80), (28, 80), (30, 80), (32, 80), (34, 80), (36, 80),  # Interior doors\n            (32, 96), (36, 96), (42, 96), (48, 96)  # Exterior doors\n        ]\n        \n        tolerance = 3  # inches\n        \n        for door_w, door_h in door_sizes:\n            if (abs(width - door_w) <= tolerance and abs(height - door_h) <= tolerance) or \\\n               (abs(width - door_h) <= tolerance and abs(height - door_w) <= tolerance):\n                return True\n        \n        return False\n    \n    def _is_window_sized(self, width: float, height: float) -> bool:\n        \"\"\"Check if dimensions match typical window sizes\"\"\"\n        # Basic window size check - windows are typically smaller than doors\n        # and have different aspect ratios\n        return (12 <= width <= 96 and 12 <= height <= 72 and \n                not self._is_door_sized(width, height))\n    \n    def _calculate_polyline_bounds(self, points: List[Tuple[float, float]]) -> Dict:\n        \"\"\"Calculate bounds for a polyline\"\"\"\n        if not points:\n            return {'min_x': 0, 'max_x': 0, 'min_y': 0, 'max_y': 0}\n        \n        return {\n            'min_x': min(p[0] for p in points),\n            'max_x': max(p[0] for p in points),\n            'min_y': min(p[1] for p in points),\n            'max_y': max(p[1] for p in points)\n        }\n    \n    def _find_nearby_wall_segments(self, center: Tuple[float, float], house_structure: Dict, radius: float) -> List[Dict]:\n        \"\"\"Find wall segments near a given point\"\"\"\n        nearby_segments = []\n        \n        for segment in house_structure.get('segments', []):\n            # Check distance from center to segment\n            dist_to_start = self._distance(center, segment['start'])\n            dist_to_end = self._distance(center, segment['end'])\n            \n            if dist_to_start <= radius or dist_to_end <= radius:\n                nearby_segments.append(segment)\n        \n        return nearby_segments\n    \n    def _determine_door_layer_name(self, position: Tuple[float, float], house_structure: Dict) -> str:\n        \"\"\"Determine appropriate layer name for a door based on its position\"\"\"\n        # For now, default to interior door\n        # In a more sophisticated implementation, this would analyze position relative to walls\n        return self.layer_naming['elements']['doors']['interior']\n    \n    def _determine_window_layer_name(self, position: Tuple[float, float], house_structure: Dict) -> str:\n        \"\"\"Determine appropriate layer name for a window based on its position\"\"\"\n        # For now, default to side window\n        return self.layer_naming['elements']['windows']['side']\n    \n    def _analyze_door_block(self, block: Dict) -> Optional[Dict]:\n        \"\"\"Analyze a door block to extract door information\"\"\"\n        # This would analyze the block's geometry to extract door dimensions and properties\n        # For now, return basic door info\n        return {\n            'type': 'block_door',\n            'block_name': block.get('name', ''),\n            'position': block.get('position', (0, 0)),\n            'layer_name': self.layer_naming['elements']['doors']['interior'],\n            'confidence': 0.8,\n            'source': 'block'\n        }\n    \n    def _analyze_window_block(self, block: Dict) -> Optional[Dict]:\n        \"\"\"Analyze a window block to extract window information\"\"\"\n        # This would analyze the block's geometry to extract window dimensions and properties\n        return {\n            'type': 'block_window',\n            'block_name': block.get('name', ''),\n            'position': block.get('position', (0, 0)),\n            'layer_name': self.layer_naming['elements']['windows']['side'],\n            'confidence': 0.8,\n            'source': 'block'\n        }\n    \n    def _detect_wall_openings(self, entities: Dict, house_structure: Dict) -> List[Dict]:\n        \"\"\"Detect openings in walls that might be doors or windows\"\"\"\n        # This would analyze wall segments for gaps that might indicate openings\n        return []\n    \n    def _extract_measurements(self, entities: Dict, elements: Dict, wall_classification: Dict) -> Dict:\n        \"\"\"\n        Extract measurements and dimensions from the DXF geometry\n        \"\"\"\n        print(\"Extracting measurements and dimensions...\")\n        \n        measurements = {\n            'walls': [],\n            'doors': [],\n            'windows': [],\n            'rooms': [],\n            'total_area': 0,\n            'perimeter_length': 0\n        }\n        \n        # Extract wall measurements\n        for classification in wall_classification.get('classifications', []):\n            wall_measurement = {\n                'wall_type': classification['wall_type'],\n                'floor_type': classification['floor_type'],\n                'layer_name': classification['layer_name'],\n                'total_length': classification['total_length'],\n                'segment_count': len(classification['segments']),\n                'segments': []\n            }\n            \n            # Measure individual segments\n            for segment in classification['segments']:\n                segment_measurement = {\n                    'start': segment['start'],\n                    'end': segment['end'],\n                    'length': segment['length'],\n                    'layer': segment['layer']\n                }\n                wall_measurement['segments'].append(segment_measurement)\n            \n            measurements['walls'].append(wall_measurement)\n            \n            if classification['is_exterior']:\n                measurements['perimeter_length'] += classification['total_length']\n        \n        # Extract door measurements\n        for door in elements.get('doors', []):\n            door_measurement = {\n                'type': door['type'],\n                'layer_name': door['layer_name'],\n                'width': door.get('width', 0),\n                'height': door.get('height', 0),\n                'position': door.get('center', door.get('position', (0, 0))),\n                'area': door.get('width', 0) * door.get('height', 0) if door.get('width') and door.get('height') else 0\n            }\n            measurements['doors'].append(door_measurement)\n        \n        # Extract window measurements\n        for window in elements.get('windows', []):\n            window_measurement = {\n                'type': window['type'],\n                'layer_name': window['layer_name'],\n                'width': window.get('width', 0),\n                'height': window.get('height', 0),\n                'position': window.get('center', window.get('position', (0, 0))),\n                'area': window.get('width', 0) * window.get('height', 0) if window.get('width') and window.get('height') else 0\n            }\n            measurements['windows'].append(window_measurement)\n        \n        # Calculate total building area (simplified)\n        # This would be enhanced to calculate actual room areas\n        if house_structure := entities.get('building_bounds'):\n            measurements['total_area'] = (house_structure.get('width', 0) * \n                                        house_structure.get('height', 0))\n        \n        print(f\"Extracted measurements: {len(measurements['walls'])} walls, \"\n              f\"{len(measurements['doors'])} doors, {len(measurements['windows'])} windows\")\n        \n        return measurements\n    \n    def _enhance_with_ai(self, ai_analyzer, house_structure: Dict, wall_classification: Dict, \n                        elements: Dict, entities: Dict) -> Tuple[Dict, Dict, Dict]:\n        \"\"\"\n        Enhance the analysis with AI insights\n        \"\"\"\n        print(\"Enhancing analysis with AI...\")\n        \n        try:\n            # Prepare data for AI analysis\n            analysis_data = {\n                'house_structure': house_structure,\n                'wall_classification': wall_classification,\n                'elements': elements,\n                'entity_summary': {\n                    'lines': len(entities.get('lines', [])),\n                    'polylines': len(entities.get('lwpolylines', [])) + len(entities.get('polylines', [])),\n                    'arcs': len(entities.get('arcs', [])),\n                    'circles': len(entities.get('circles', []))\n                }\n            }\n            \n            # Use AI to enhance classifications and detections\n            enhanced_analysis = ai_analyzer.analyze_geometric_data(analysis_data, house_structure)\n            \n            # Apply AI enhancements\n            if enhanced_analysis and isinstance(enhanced_analysis, dict):\n                # Update classifications with AI insights\n                ai_wall_classifications = enhanced_analysis.get('wall_classifications', [])\n                for i, classification in enumerate(wall_classification.get('classifications', [])):\n                    if i < len(ai_wall_classifications):\n                        ai_class = ai_wall_classifications[i]\n                        if ai_class.get('confidence', 0) > 0.7:\n                            classification['ai_enhanced'] = True\n                            classification['ai_confidence'] = ai_class.get('confidence', 0)\n                \n                # Update element detections with AI insights\n                ai_elements = enhanced_analysis.get('elements', {})\n                for element_type in ['doors', 'windows']:\n                    if element_type in ai_elements:\n                        elements[element_type].extend(ai_elements[element_type])\n            \n            print(\"AI enhancement completed successfully\")\n            \n        except Exception as e:\n            print(f\"AI enhancement failed: {e}. Continuing with geometric analysis.\")\n        \n        return house_structure, wall_classification, elements\n    \n    def _segments_to_polylines(self, segments: List[Dict]) -> List[List[Tuple[float, float]]]:\n        \"\"\"\n        Convert a list of line segments into continuous polylines for boundary tracing.\n        This groups connected segments into continuous paths.\n        \"\"\"\n        if not segments:\n            return []\n        \n        polylines = []\n        used_segments = set()\n        tolerance = 2.0  # Connection tolerance in units\n        \n        for i, segment in enumerate(segments):\n            if i in used_segments:\n                continue\n            \n            # Start a new polyline with this segment\n            polyline = [segment['start'], segment['end']]\n            used_segments.add(i)\n            \n            # Try to extend the polyline by finding connected segments\n            extended = True\n            while extended:\n                extended = False\n                last_point = polyline[-1]\n                first_point = polyline[0]\n                \n                # Look for segments that connect to either end of the current polyline\n                for j, other_segment in enumerate(segments):\n                    if j in used_segments:\n                        continue\n                    \n                    other_start = other_segment['start']\n                    other_end = other_segment['end']\n                    \n                    # Check if this segment connects to the end of our polyline\n                    if self._points_are_close(last_point, other_start, tolerance):\n                        polyline.append(other_end)\n                        used_segments.add(j)\n                        extended = True\n                        break\n                    elif self._points_are_close(last_point, other_end, tolerance):\n                        polyline.append(other_start)\n                        used_segments.add(j)\n                        extended = True\n                        break\n                    # Check if this segment connects to the beginning of our polyline\n                    elif self._points_are_close(first_point, other_end, tolerance):\n                        polyline.insert(0, other_start)\n                        used_segments.add(j)\n                        extended = True\n                        break\n                    elif self._points_are_close(first_point, other_start, tolerance):\n                        polyline.insert(0, other_end)\n                        used_segments.add(j)\n                        extended = True\n                        break\n            \n            polylines.append(polyline)\n        \n        return polylines\n    \n    def _points_are_close(self, point1: Tuple[float, float], point2: Tuple[float, float], tolerance: float) -> bool:\n        \"\"\"Check if two points are within tolerance distance\"\"\"\n        dx = point1[0] - point2[0]\n        dy = point1[1] - point2[1]\n        distance = math.sqrt(dx*dx + dy*dy)\n        return distance <= tolerance\n    \n    def _generate_drawing_commands(self, house_structure: Dict, wall_classification: Dict, elements: Dict) -> List[Dict]:\n        \"\"\"\n        Generate drawing commands for AutoCAD layer creation and geometry drawing.\n        This creates continuous boundary traces for outer and inner boundaries.\n        \"\"\"\n        print(\"Generating drawing commands for boundary highlighting...\")\n        \n        commands = []\n        \n        # Generate commands for wall boundaries - draw as continuous polylines\n        for classification in wall_classification.get('classifications', []):\n            layer_name = classification['layer_name']\n            color = classification['color']\n            wall_type = classification.get('wall_type', 'interior')\n            \n            # Create layer command\n            commands.append({\n                'action': 'create_layer',\n                'layer_name': layer_name,\n                'color': color,\n                'linetype': 'CONTINUOUS'\n            })\n            \n            # Convert segments to continuous polylines for boundary highlighting\n            polylines = self._segments_to_polylines(classification['segments'])\n            \n            # Draw each continuous boundary as a polyline\n            for polyline_points in polylines:\n                if len(polyline_points) >= 2:\n                    commands.append({\n                        'action': 'draw_polyline',\n                        'coordinates': polyline_points,\n                        'layer_name': layer_name,\n                        'closed': False\n                    })\n                    \n            print(f\"  Created {len(polylines)} continuous {'outer' if wall_type == 'exterior' else 'inner'} boundary traces on layer '{layer_name}'\")\n        \n        # Generate commands for elements\n        for element_type in ['doors', 'windows']:\n            for element in elements.get(element_type, []):\n                layer_name = element['layer_name']\n                color = element['color']\n                \n                # Create layer command\n                commands.append({\n                    'action': 'create_layer',\n                    'layer_name': layer_name,\n                    'color': color,\n                    'linetype': 'CONTINUOUS'\n                })\n                \n                # Draw element\n                if element['type'] == 'swing_door' and 'center' in element and 'radius' in element:\n                    commands.append({\n                        'action': 'draw_arc',\n                        'center': element['center'],\n                        'radius': element['radius'],\n                        'start_angle': 0,\n                        'end_angle': 90,\n                        'layer_name': layer_name\n                    })\n                elif 'bounds' in element:\n                    commands.append({\n                        'action': 'draw_rectangle',\n                        'point1': (element['bounds']['min_x'], element['bounds']['min_y']),\n                        'point2': (element['bounds']['max_x'], element['bounds']['max_y']),\n                        'layer_name': layer_name\n                    })\n        \n        print(f\"Generated {len(commands)} drawing commands\")\n        return commands\n    \n    def _format_results(self, house_structure: Dict, wall_classification: Dict, \n                       elements: Dict, measurements: Dict, drawing_commands: List[Dict]) -> Dict:\n        \"\"\"\n        Format the results in the expected output format\n        \"\"\"\n        # Count total elements for reporting\n        total_elements = (len(elements.get('doors', [])) + \n                         len(elements.get('windows', [])) + \n                         len(elements.get('openings', [])))\n        \n        # Extract layer names for reporting\n        layers_created = list(set(\n            [cmd['layer_name'] for cmd in drawing_commands if cmd['action'] == 'create_layer']\n        ))\n        \n        return {\n            'success': True,\n            'drawing_type': 'floor_plan',  # Determined from analysis\n            'analysis_method': 'enhanced_geometry_processing',\n            'spaces': [\n                {\n                    'type': classification['wall_type'],\n                    'floor_type': classification['floor_type'],\n                    'layer_name': classification['layer_name'],\n                    'coordinates': [seg['start'] + seg['end'] for seg in classification['segments']],\n                    'total_length': classification['total_length'],\n                    'confidence': classification.get('confidence', 0.8)\n                }\n                for classification in wall_classification.get('classifications', [])\n            ],\n            'elements': [\n                {\n                    'type': element['type'],\n                    'layer_name': element['layer_name'],\n                    'position': element.get('center', element.get('position', (0, 0))),\n                    'dimensions': {\n                        'width': element.get('width', 0),\n                        'height': element.get('height', 0)\n                    },\n                    'confidence': element.get('confidence', 0.8)\n                }\n                for element_type in ['doors', 'windows', 'openings']\n                for element in elements.get(element_type, [])\n            ],\n            'layers_created': layers_created,\n            'elements_detected': total_elements,\n            'measurements': measurements,\n            'drawing_commands': drawing_commands,\n            'analysis_metadata': {\n                'outline_detected': house_structure.get('outline_detected', False),\n                'total_wall_groups': len(wall_classification.get('classifications', [])),\n                'perimeter_length': measurements.get('perimeter_length', 0),\n                'total_area': measurements.get('total_area', 0),\n                'processing_method': 'enhanced_dxf_geometry'\n            }\n        }\n    \n    def _create_enhanced_fallback(self) -> Dict:\n        \"\"\"\n        Create a fallback response when no geometry is detected\n        \"\"\"\n        return {\n            'success': False,\n            'error': 'No valid geometry detected in DXF file',\n            'drawing_type': 'unknown',\n            'analysis_method': 'enhanced_geometry_processing',\n            'spaces': [],\n            'elements': [],\n            'layers_created': [],\n            'elements_detected': 0,\n            'measurements': {\n                'walls': [], 'doors': [], 'windows': [], 'rooms': [],\n                'total_area': 0, 'perimeter_length': 0\n            },\n            'drawing_commands': [],\n            'analysis_metadata': {\n                'outline_detected': False,\n                'total_wall_groups': 0,\n                'processing_method': 'enhanced_dxf_geometry',\n                'fallback_reason': 'no_geometry_detected'\n            }\n        }\n    \n    def export_measurements_csv(self, measurements: Dict, output_path: str) -> bool:\n        \"\"\"\n        Export measurements to CSV format\n        \"\"\"\n        try:\n            import csv\n            \n            with open(output_path, 'w', newline='') as csvfile:\n                writer = csv.writer(csvfile)\n                \n                # Write headers\n                writer.writerow(['Element Type', 'Layer Name', 'Width', 'Height', 'Length', 'Area', 'Position X', 'Position Y'])\n                \n                # Write wall measurements\n                for wall in measurements.get('walls', []):\n                    for segment in wall['segments']:\n                        writer.writerow([\n                            f\"Wall ({wall['wall_type']})\",\n                            wall['layer_name'],\n                            '',  # Width\n                            '',  # Height\n                            segment['length'],\n                            '',  # Area\n                            segment['start'][0],\n                            segment['start'][1]\n                        ])\n                \n                # Write door measurements\n                for door in measurements.get('doors', []):\n                    writer.writerow([\n                        'Door',\n                        door['layer_name'],\n                        door['width'],\n                        door['height'],\n                        '',  # Length\n                        door['area'],\n                        door['position'][0],\n                        door['position'][1]\n                    ])\n                \n                # Write window measurements\n                for window in measurements.get('windows', []):\n                    writer.writerow([\n                        'Window',\n                        window['layer_name'],\n                        window['width'],\n                        window['height'],\n                        '',  # Length\n                        window['area'],\n                        window['position'][0],\n                        window['position'][1]\n                    ])\n            \n            print(f\"Measurements exported to {output_path}\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error exporting measurements to CSV: {e}\")\n            return False\n    \n    def export_measurements_json(self, measurements: Dict, output_path: str) -> bool:\n        \"\"\"\n        Export measurements to JSON format\n        \"\"\"\n        try:\n            with open(output_path, 'w') as jsonfile:\n                json.dump(measurements, jsonfile, indent=2)\n            \n            print(f\"Measurements exported to {output_path}\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error exporting measurements to JSON: {e}\")\n            return False","size_bytes":49257}},"version":1}